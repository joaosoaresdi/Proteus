/*
 * generated by Xtext 2.25.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalAgenParser;
import org.xtext.services.AgenGrammarAccess;

public class AgenParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AgenGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AgenGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypesAccess().getAlternatives(), "rule__Types__Alternatives");
			builder.put(grammarAccess.getExecParamsAccess().getAlternatives(), "rule__ExecParams__Alternatives");
			builder.put(grammarAccess.getWhatAccess().getAlternatives(), "rule__What__Alternatives");
			builder.put(grammarAccess.getCodeBlockAccess().getAlternatives(), "rule__CodeBlock__Alternatives");
			builder.put(grammarAccess.getCodeBlockAccess().getAlternatives_1_3(), "rule__CodeBlock__Alternatives_1_3");
			builder.put(grammarAccess.getFaultCondAccess().getAlternatives(), "rule__FaultCond__Alternatives");
			builder.put(grammarAccess.getWhenAccess().getAlternatives(), "rule__When__Alternatives");
			builder.put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
			builder.put(grammarAccess.getConditionAccess().getAlternatives_1_3(), "rule__Condition__Alternatives_1_3");
			builder.put(grammarAccess.getSyncpointOnFailAccess().getAlternatives(), "rule__SyncpointOnFail__Alternatives");
			builder.put(grammarAccess.getSyncpointTypeAccess().getAlternatives(), "rule__SyncpointType__Alternatives");
			builder.put(grammarAccess.getAlterPacketFaultTypeAccess().getAlternatives(), "rule__AlterPacketFaultType__Alternatives");
			builder.put(grammarAccess.getJOIN_TYPEAccess().getAlternatives(), "rule__JOIN_TYPE__Alternatives");
			builder.put(grammarAccess.getRunConfigurationAccess().getGroup(), "rule__RunConfiguration__Group__0");
			builder.put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
			builder.put(grammarAccess.getNodeAccess().getGroup_10(), "rule__Node__Group_10__0");
			builder.put(grammarAccess.getLogAccess().getGroup(), "rule__Log__Group__0");
			builder.put(grammarAccess.getLogAccess().getGroup_4(), "rule__Log__Group_4__0");
			builder.put(grammarAccess.getLogAccess().getGroup_5(), "rule__Log__Group_5__0");
			builder.put(grammarAccess.getSyncpointAccess().getGroup(), "rule__Syncpoint__Group__0");
			builder.put(grammarAccess.getFaultAccess().getGroup(), "rule__Fault__Group__0");
			builder.put(grammarAccess.getExecParamsAccess().getGroup_0(), "rule__ExecParams__Group_0__0");
			builder.put(grammarAccess.getExecParamsAccess().getGroup_1(), "rule__ExecParams__Group_1__0");
			builder.put(grammarAccess.getExecParamsAccess().getGroup_1_6(), "rule__ExecParams__Group_1_6__0");
			builder.put(grammarAccess.getRepeatExecutionAccess().getGroup(), "rule__RepeatExecution__Group__0");
			builder.put(grammarAccess.getAlterPacketFaultAccess().getGroup(), "rule__AlterPacketFault__Group__0");
			builder.put(grammarAccess.getLeakFaultAccess().getGroup(), "rule__LeakFault__Group__0");
			builder.put(grammarAccess.getBigPacketFaultAccess().getGroup(), "rule__BigPacketFault__Group__0");
			builder.put(grammarAccess.getExitAccess().getGroup(), "rule__Exit__Group__0");
			builder.put(grammarAccess.getSleepAccess().getGroup(), "rule__Sleep__Group__0");
			builder.put(grammarAccess.getCPULoaderAccess().getGroup(), "rule__CPULoader__Group__0");
			builder.put(grammarAccess.getCodeBlockAccess().getGroup_0(), "rule__CodeBlock__Group_0__0");
			builder.put(grammarAccess.getCodeBlockAccess().getGroup_1(), "rule__CodeBlock__Group_1__0");
			builder.put(grammarAccess.getCodeBlockAccess().getGroup_1_3_0(), "rule__CodeBlock__Group_1_3_0__0");
			builder.put(grammarAccess.getCodeBlockAccess().getGroup_1_3_1(), "rule__CodeBlock__Group_1_3_1__0");
			builder.put(grammarAccess.getFaultCondAccess().getGroup_0(), "rule__FaultCond__Group_0__0");
			builder.put(grammarAccess.getFaultCondAccess().getGroup_1(), "rule__FaultCond__Group_1__0");
			builder.put(grammarAccess.getFaultCondAccess().getGroup_1_5(), "rule__FaultCond__Group_1_5__0");
			builder.put(grammarAccess.getWhenAccess().getGroup_3(), "rule__When__Group_3__0");
			builder.put(grammarAccess.getWhenAccess().getGroup_5(), "rule__When__Group_5__0");
			builder.put(grammarAccess.getRandomAccess().getGroup(), "rule__Random__Group__0");
			builder.put(grammarAccess.getBetweenSecondsAccess().getGroup(), "rule__BetweenSeconds__Group__0");
			builder.put(grammarAccess.getBetweenRoundsAccess().getGroup(), "rule__BetweenRounds__Group__0");
			builder.put(grammarAccess.getBetweenRoundsAccess().getGroup_7(), "rule__BetweenRounds__Group_7__0");
			builder.put(grammarAccess.getBetweenRoundsAccess().getGroup_8(), "rule__BetweenRounds__Group_8__0");
			builder.put(grammarAccess.getConditionAccess().getGroup_0(), "rule__Condition__Group_0__0");
			builder.put(grammarAccess.getConditionAccess().getGroup_1(), "rule__Condition__Group_1__0");
			builder.put(grammarAccess.getConditionAccess().getGroup_1_3_0(), "rule__Condition__Group_1_3_0__0");
			builder.put(grammarAccess.getConditionAccess().getGroup_1_3_1(), "rule__Condition__Group_1_3_1__0");
			builder.put(grammarAccess.getWhereAccess().getGroup(), "rule__Where__Group__0");
			builder.put(grammarAccess.getWhereAccess().getGroup_2(), "rule__Where__Group_2__0");
			builder.put(grammarAccess.getModelAccess().getTypesAssignment(), "rule__Model__TypesAssignment");
			builder.put(grammarAccess.getRunConfigurationAccess().getRuntimePackageAssignment_4(), "rule__RunConfiguration__RuntimePackageAssignment_4");
			builder.put(grammarAccess.getRunConfigurationAccess().getCoordinatorLocationAssignment_8(), "rule__RunConfiguration__CoordinatorLocationAssignment_8");
			builder.put(grammarAccess.getRunConfigurationAccess().getNodesAssignment_10(), "rule__RunConfiguration__NodesAssignment_10");
			builder.put(grammarAccess.getNodeAccess().getNameAssignment_1(), "rule__Node__NameAssignment_1");
			builder.put(grammarAccess.getNodeAccess().getFirstAttachPointAssignment_5(), "rule__Node__FirstAttachPointAssignment_5");
			builder.put(grammarAccess.getNodeAccess().getNodeLocationAssignment_9(), "rule__Node__NodeLocationAssignment_9");
			builder.put(grammarAccess.getNodeAccess().getLogLocationsAssignment_10_3(), "rule__Node__LogLocationsAssignment_10_3");
			builder.put(grammarAccess.getNodeAccess().getFaultIDsAssignment_12(), "rule__Node__FaultIDsAssignment_12");
			builder.put(grammarAccess.getLogAccess().getNameAssignment_1(), "rule__Log__NameAssignment_1");
			builder.put(grammarAccess.getLogAccess().getFaultCondAssignment_3(), "rule__Log__FaultCondAssignment_3");
			builder.put(grammarAccess.getLogAccess().getExtraDataAssignment_4_3(), "rule__Log__ExtraDataAssignment_4_3");
			builder.put(grammarAccess.getLogAccess().getStateBasedAssignment_5_3(), "rule__Log__StateBasedAssignment_5_3");
			builder.put(grammarAccess.getSyncpointAccess().getNameAssignment_1(), "rule__Syncpoint__NameAssignment_1");
			builder.put(grammarAccess.getSyncpointAccess().getNodesDependantAssignment_3(), "rule__Syncpoint__NodesDependantAssignment_3");
			builder.put(grammarAccess.getSyncpointAccess().getTypeAssignment_7(), "rule__Syncpoint__TypeAssignment_7");
			builder.put(grammarAccess.getSyncpointAccess().getOnFailAssignment_11(), "rule__Syncpoint__OnFailAssignment_11");
			builder.put(grammarAccess.getSyncpointAccess().getFaultCondAssignment_13(), "rule__Syncpoint__FaultCondAssignment_13");
			builder.put(grammarAccess.getFaultAccess().getNameAssignment_1(), "rule__Fault__NameAssignment_1");
			builder.put(grammarAccess.getFaultAccess().getPointcutAssignment_5(), "rule__Fault__PointcutAssignment_5");
			builder.put(grammarAccess.getFaultAccess().getExecParamsAssignment_7(), "rule__Fault__ExecParamsAssignment_7");
			builder.put(grammarAccess.getExecParamsAccess().getNameAssignment_0_2(), "rule__ExecParams__NameAssignment_0_2");
			builder.put(grammarAccess.getExecParamsAccess().getNameAssignment_1_1(), "rule__ExecParams__NameAssignment_1_1");
			builder.put(grammarAccess.getExecParamsAccess().getWhereAssignment_1_5(), "rule__ExecParams__WhereAssignment_1_5");
			builder.put(grammarAccess.getExecParamsAccess().getWhenAssignment_1_6_2(), "rule__ExecParams__WhenAssignment_1_6_2");
			builder.put(grammarAccess.getExecParamsAccess().getWhatAssignment_1_9(), "rule__ExecParams__WhatAssignment_1_9");
			builder.put(grammarAccess.getWhatAccess().getCodeBlockAssignment_0(), "rule__What__CodeBlockAssignment_0");
			builder.put(grammarAccess.getWhatAccess().getSleepAssignment_1(), "rule__What__SleepAssignment_1");
			builder.put(grammarAccess.getWhatAccess().getExitAssignment_2(), "rule__What__ExitAssignment_2");
			builder.put(grammarAccess.getWhatAccess().getBigPacketFaultAssignment_3(), "rule__What__BigPacketFaultAssignment_3");
			builder.put(grammarAccess.getWhatAccess().getLeakFaultAssignment_4(), "rule__What__LeakFaultAssignment_4");
			builder.put(grammarAccess.getWhatAccess().getAlterPacketFaultAssignment_5(), "rule__What__AlterPacketFaultAssignment_5");
			builder.put(grammarAccess.getWhatAccess().getCpuLoaderAssignment_6(), "rule__What__CpuLoaderAssignment_6");
			builder.put(grammarAccess.getWhatAccess().getSkipExecutionAssignment_7(), "rule__What__SkipExecutionAssignment_7");
			builder.put(grammarAccess.getWhatAccess().getRepeatExecutionAssignment_8(), "rule__What__RepeatExecutionAssignment_8");
			builder.put(grammarAccess.getRepeatExecutionAccess().getTimesAssignment_2(), "rule__RepeatExecution__TimesAssignment_2");
			builder.put(grammarAccess.getAlterPacketFaultAccess().getOriginalDataAssignment_2(), "rule__AlterPacketFault__OriginalDataAssignment_2");
			builder.put(grammarAccess.getAlterPacketFaultAccess().getKindOfAlterationAssignment_4(), "rule__AlterPacketFault__KindOfAlterationAssignment_4");
			builder.put(grammarAccess.getLeakFaultAccess().getNrofLeaksAssignment_2(), "rule__LeakFault__NrofLeaksAssignment_2");
			builder.put(grammarAccess.getBigPacketFaultAccess().getOriginalDataAssignment_2(), "rule__BigPacketFault__OriginalDataAssignment_2");
			builder.put(grammarAccess.getBigPacketFaultAccess().getTimesLargerAssignment_4(), "rule__BigPacketFault__TimesLargerAssignment_4");
			builder.put(grammarAccess.getExitAccess().getTypeAssignment_2(), "rule__Exit__TypeAssignment_2");
			builder.put(grammarAccess.getSleepAccess().getTimeAssignment_2(), "rule__Sleep__TimeAssignment_2");
			builder.put(grammarAccess.getCPULoaderAccess().getAmountAssignment_2(), "rule__CPULoader__AmountAssignment_2");
			builder.put(grammarAccess.getCodeBlockAccess().getNameAssignment_0_2(), "rule__CodeBlock__NameAssignment_0_2");
			builder.put(grammarAccess.getCodeBlockAccess().getNameAssignment_1_1(), "rule__CodeBlock__NameAssignment_1_1");
			builder.put(grammarAccess.getCodeBlockAccess().getImportsAssignment_1_3_0_2(), "rule__CodeBlock__ImportsAssignment_1_3_0_2");
			builder.put(grammarAccess.getCodeBlockAccess().getCodeAssignment_1_3_0_7(), "rule__CodeBlock__CodeAssignment_1_3_0_7");
			builder.put(grammarAccess.getCodeBlockAccess().getCodeAssignment_1_3_1_0(), "rule__CodeBlock__CodeAssignment_1_3_1_0");
			builder.put(grammarAccess.getFaultCondAccess().getNameAssignment_0_1(), "rule__FaultCond__NameAssignment_0_1");
			builder.put(grammarAccess.getFaultCondAccess().getNameAssignment_1_1(), "rule__FaultCond__NameAssignment_1_1");
			builder.put(grammarAccess.getFaultCondAccess().getWhereAssignment_1_3(), "rule__FaultCond__WhereAssignment_1_3");
			builder.put(grammarAccess.getFaultCondAccess().getWhenAssignment_1_5_1(), "rule__FaultCond__WhenAssignment_1_5_1");
			builder.put(grammarAccess.getFaultCondAccess().getExtraDataAssignment_1_6(), "rule__FaultCond__ExtraDataAssignment_1_6");
			builder.put(grammarAccess.getWhenAccess().getBetweenRoundsAssignment_0(), "rule__When__BetweenRoundsAssignment_0");
			builder.put(grammarAccess.getWhenAccess().getBetweenSecondsAssignment_1(), "rule__When__BetweenSecondsAssignment_1");
			builder.put(grammarAccess.getWhenAccess().getRandomAssignment_2(), "rule__When__RandomAssignment_2");
			builder.put(grammarAccess.getWhenAccess().getIfConditionAssignment_3_2(), "rule__When__IfConditionAssignment_3_2");
			builder.put(grammarAccess.getWhenAccess().getFaultCondAssignment_4(), "rule__When__FaultCondAssignment_4");
			builder.put(grammarAccess.getWhenAccess().getSyncpointAssignment_5_2(), "rule__When__SyncpointAssignment_5_2");
			builder.put(grammarAccess.getRandomAccess().getChanceAssignment_2(), "rule__Random__ChanceAssignment_2");
			builder.put(grammarAccess.getBetweenSecondsAccess().getStartAssignment_2(), "rule__BetweenSeconds__StartAssignment_2");
			builder.put(grammarAccess.getBetweenSecondsAccess().getEndAssignment_4(), "rule__BetweenSeconds__EndAssignment_4");
			builder.put(grammarAccess.getBetweenRoundsAccess().getStartAssignment_2(), "rule__BetweenRounds__StartAssignment_2");
			builder.put(grammarAccess.getBetweenRoundsAccess().getEndAssignment_4(), "rule__BetweenRounds__EndAssignment_4");
			builder.put(grammarAccess.getBetweenRoundsAccess().getIntervalAssignment_6(), "rule__BetweenRounds__IntervalAssignment_6");
			builder.put(grammarAccess.getBetweenRoundsAccess().getConditionAssignment_7_1(), "rule__BetweenRounds__ConditionAssignment_7_1");
			builder.put(grammarAccess.getBetweenRoundsAccess().getRandomAssignment_8_1(), "rule__BetweenRounds__RandomAssignment_8_1");
			builder.put(grammarAccess.getConditionAccess().getNameAssignment_0_2(), "rule__Condition__NameAssignment_0_2");
			builder.put(grammarAccess.getConditionAccess().getNameAssignment_1_1(), "rule__Condition__NameAssignment_1_1");
			builder.put(grammarAccess.getConditionAccess().getImportsAssignment_1_3_0_2(), "rule__Condition__ImportsAssignment_1_3_0_2");
			builder.put(grammarAccess.getConditionAccess().getCodeAssignment_1_3_0_7(), "rule__Condition__CodeAssignment_1_3_0_7");
			builder.put(grammarAccess.getConditionAccess().getCodeAssignment_1_3_1_0(), "rule__Condition__CodeAssignment_1_3_1_0");
			builder.put(grammarAccess.getWhereAccess().getJoinTypeAssignment_2_0(), "rule__Where__JoinTypeAssignment_2_0");
			builder.put(grammarAccess.getWhereAccess().getNameAssignment_3(), "rule__Where__NameAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AgenGrammarAccess grammarAccess;

	@Override
	protected InternalAgenParser createParser() {
		InternalAgenParser result = new InternalAgenParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AgenGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AgenGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
