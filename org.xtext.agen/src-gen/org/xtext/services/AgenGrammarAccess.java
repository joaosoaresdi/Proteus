/*
 * generated by Xtext 2.25.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AgenGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.Model");
		private final Assignment cTypesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypesTypesParserRuleCall_0 = (RuleCall)cTypesAssignment.eContents().get(0);
		
		//Model:
		//    (types+=Types)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(types+=Types)*
		public Assignment getTypesAssignment() { return cTypesAssignment; }
		
		//Types
		public RuleCall getTypesTypesParserRuleCall_0() { return cTypesTypesParserRuleCall_0; }
	}
	public class TypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.Types");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRunConfigurationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFaultParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFaultCondParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhereParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCodeBlockParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConditionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSyncpointParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLogParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Types:
		//    RunConfiguration | Fault | FaultCond | Where | CodeBlock | Condition | Syncpoint | Log
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RunConfiguration | Fault | FaultCond | Where | CodeBlock | Condition | Syncpoint | Log
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RunConfiguration
		public RuleCall getRunConfigurationParserRuleCall_0() { return cRunConfigurationParserRuleCall_0; }
		
		//Fault
		public RuleCall getFaultParserRuleCall_1() { return cFaultParserRuleCall_1; }
		
		//FaultCond
		public RuleCall getFaultCondParserRuleCall_2() { return cFaultCondParserRuleCall_2; }
		
		//Where
		public RuleCall getWhereParserRuleCall_3() { return cWhereParserRuleCall_3; }
		
		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall_4() { return cCodeBlockParserRuleCall_4; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_5() { return cConditionParserRuleCall_5; }
		
		//Syncpoint
		public RuleCall getSyncpointParserRuleCall_6() { return cSyncpointParserRuleCall_6; }
		
		//Log
		public RuleCall getLogParserRuleCall_7() { return cLogParserRuleCall_7; }
	}
	public class RunConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.RunConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRunConfigurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCoordinatorLocationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCoordinatorLocationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCoordinatorLocationSTRINGTerminalRuleCall_4_0 = (RuleCall)cCoordinatorLocationAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNodesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNodesNodeParserRuleCall_6_0 = (RuleCall)cNodesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RunConfiguration:
		//    'RunConfiguration' '{' 'CoordinatorLocation' '=' CoordinatorLocation = STRING ';' nodes+=(Node)* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'RunConfiguration' '{' 'CoordinatorLocation' '=' CoordinatorLocation = STRING ';' nodes+=(Node)* '}'
		public Group getGroup() { return cGroup; }
		
		//'RunConfiguration'
		public Keyword getRunConfigurationKeyword_0() { return cRunConfigurationKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'CoordinatorLocation'
		public Keyword getCoordinatorLocationKeyword_2() { return cCoordinatorLocationKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//CoordinatorLocation = STRING
		public Assignment getCoordinatorLocationAssignment_4() { return cCoordinatorLocationAssignment_4; }
		
		//STRING
		public RuleCall getCoordinatorLocationSTRINGTerminalRuleCall_4_0() { return cCoordinatorLocationSTRINGTerminalRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//nodes+=(Node)*
		public Assignment getNodesAssignment_6() { return cNodesAssignment_6; }
		
		//(Node)
		public RuleCall getNodesNodeParserRuleCall_6_0() { return cNodesNodeParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFirstAttachPointKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFirstAttachPointAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFirstAttachPointSTRINGTerminalRuleCall_5_0 = (RuleCall)cFirstAttachPointAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLocationKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cNodeLocationAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cNodeLocationSTRINGTerminalRuleCall_9_0 = (RuleCall)cNodeLocationAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cSemicolonKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLogDataKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Keyword cEqualsSignKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cLogLocationsAssignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final RuleCall cLogLocationsIDTerminalRuleCall_10_3_0 = (RuleCall)cLogLocationsAssignment_10_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cFaultIDsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cFaultIDsIDTerminalRuleCall_12_0 = (RuleCall)cFaultIDsAssignment_12.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Node:
		//    'Node' name=ID '(' 'firstAttachPoint' '=' firstAttachPoint = STRING ';' 'location' '=' nodeLocation=STRING (';' 'logData' '=' logLocations+=ID*)? ';' faultIDs+=(ID)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Node' name=ID '(' 'firstAttachPoint' '=' firstAttachPoint = STRING ';' 'location' '=' nodeLocation=STRING (';' 'logData' '=' logLocations+=ID*)? ';' faultIDs+=(ID)* ')'
		public Group getGroup() { return cGroup; }
		
		//'Node'
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'firstAttachPoint'
		public Keyword getFirstAttachPointKeyword_3() { return cFirstAttachPointKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//firstAttachPoint = STRING
		public Assignment getFirstAttachPointAssignment_5() { return cFirstAttachPointAssignment_5; }
		
		//STRING
		public RuleCall getFirstAttachPointSTRINGTerminalRuleCall_5_0() { return cFirstAttachPointSTRINGTerminalRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//'location'
		public Keyword getLocationKeyword_7() { return cLocationKeyword_7; }
		
		//'='
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }
		
		//nodeLocation=STRING
		public Assignment getNodeLocationAssignment_9() { return cNodeLocationAssignment_9; }
		
		//STRING
		public RuleCall getNodeLocationSTRINGTerminalRuleCall_9_0() { return cNodeLocationSTRINGTerminalRuleCall_9_0; }
		
		//(';' 'logData' '=' logLocations+=ID*)?
		public Group getGroup_10() { return cGroup_10; }
		
		//';'
		public Keyword getSemicolonKeyword_10_0() { return cSemicolonKeyword_10_0; }
		
		//'logData'
		public Keyword getLogDataKeyword_10_1() { return cLogDataKeyword_10_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_10_2() { return cEqualsSignKeyword_10_2; }
		
		//logLocations+=ID*
		public Assignment getLogLocationsAssignment_10_3() { return cLogLocationsAssignment_10_3; }
		
		//ID
		public RuleCall getLogLocationsIDTerminalRuleCall_10_3_0() { return cLogLocationsIDTerminalRuleCall_10_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
		
		//faultIDs+=(ID)*
		public Assignment getFaultIDsAssignment_12() { return cFaultIDsAssignment_12; }
		
		//(ID)
		public RuleCall getFaultIDsIDTerminalRuleCall_12_0() { return cFaultIDsIDTerminalRuleCall_12_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_13() { return cRightParenthesisKeyword_13; }
	}
	public class LogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.Log");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoggingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFaultCondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFaultCondIDTerminalRuleCall_3_0 = (RuleCall)cFaultCondAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cExtraDataKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cEqualsSignKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cExtraDataAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cExtraDataCodeBlockParserRuleCall_4_3_0 = (RuleCall)cExtraDataAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cStateBasedVariablesKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cEqualsSignKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cStateBasedAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cStateBasedCodeBlockParserRuleCall_5_3_0 = (RuleCall)cStateBasedAssignment_5_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Log:
		//    'Logging' name=ID '{' faultCond=ID (';' 'extraData' '=' extraData=CodeBlock)? (';' 'stateBasedVariables' '=' stateBased=CodeBlock)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Logging' name=ID '{' faultCond=ID (';' 'extraData' '=' extraData=CodeBlock)? (';' 'stateBasedVariables' '=' stateBased=CodeBlock)? '}'
		public Group getGroup() { return cGroup; }
		
		//'Logging'
		public Keyword getLoggingKeyword_0() { return cLoggingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//faultCond=ID
		public Assignment getFaultCondAssignment_3() { return cFaultCondAssignment_3; }
		
		//ID
		public RuleCall getFaultCondIDTerminalRuleCall_3_0() { return cFaultCondIDTerminalRuleCall_3_0; }
		
		//(';' 'extraData' '=' extraData=CodeBlock)?
		public Group getGroup_4() { return cGroup_4; }
		
		//';'
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }
		
		//'extraData'
		public Keyword getExtraDataKeyword_4_1() { return cExtraDataKeyword_4_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_2() { return cEqualsSignKeyword_4_2; }
		
		//extraData=CodeBlock
		public Assignment getExtraDataAssignment_4_3() { return cExtraDataAssignment_4_3; }
		
		//CodeBlock
		public RuleCall getExtraDataCodeBlockParserRuleCall_4_3_0() { return cExtraDataCodeBlockParserRuleCall_4_3_0; }
		
		//(';' 'stateBasedVariables' '=' stateBased=CodeBlock)?
		public Group getGroup_5() { return cGroup_5; }
		
		//';'
		public Keyword getSemicolonKeyword_5_0() { return cSemicolonKeyword_5_0; }
		
		//'stateBasedVariables'
		public Keyword getStateBasedVariablesKeyword_5_1() { return cStateBasedVariablesKeyword_5_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_2() { return cEqualsSignKeyword_5_2; }
		
		//stateBased=CodeBlock
		public Assignment getStateBasedAssignment_5_3() { return cStateBasedAssignment_5_3; }
		
		//CodeBlock
		public RuleCall getStateBasedCodeBlockParserRuleCall_5_3_0() { return cStateBasedCodeBlockParserRuleCall_5_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SyncpointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.Syncpoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSyncpointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNodesDependantAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNodesDependantIDTerminalRuleCall_3_0 = (RuleCall)cNodesDependantAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cTypeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeSyncpointTypeEnumRuleCall_7_0 = (RuleCall)cTypeAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cOnFailureKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cOnFailAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cOnFailSyncpointOnFailEnumRuleCall_11_0 = (RuleCall)cOnFailAssignment_11.eContents().get(0);
		private final Keyword cSemicolonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cFaultCondKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cEqualsSignKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cFaultCondAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cFaultCondFaultCondParserRuleCall_15_0 = (RuleCall)cFaultCondAssignment_15.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//Syncpoint:
		//    'Syncpoint' name=ID '(' nodesDependant+=ID* ';' 'type' '=' type=syncpointType ';' 'onFailure' '=' onFail=syncpointOnFail ';' 'faultCond' '=' faultCond=FaultCond ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Syncpoint' name=ID '(' nodesDependant+=ID* ';' 'type' '=' type=syncpointType ';' 'onFailure' '=' onFail=syncpointOnFail ';' 'faultCond' '=' faultCond=FaultCond ')'
		public Group getGroup() { return cGroup; }
		
		//'Syncpoint'
		public Keyword getSyncpointKeyword_0() { return cSyncpointKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//nodesDependant+=ID*
		public Assignment getNodesDependantAssignment_3() { return cNodesDependantAssignment_3; }
		
		//ID
		public RuleCall getNodesDependantIDTerminalRuleCall_3_0() { return cNodesDependantIDTerminalRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//'type'
		public Keyword getTypeKeyword_5() { return cTypeKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//type=syncpointType
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }
		
		//syncpointType
		public RuleCall getTypeSyncpointTypeEnumRuleCall_7_0() { return cTypeSyncpointTypeEnumRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
		
		//'onFailure'
		public Keyword getOnFailureKeyword_9() { return cOnFailureKeyword_9; }
		
		//'='
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }
		
		//onFail=syncpointOnFail
		public Assignment getOnFailAssignment_11() { return cOnFailAssignment_11; }
		
		//syncpointOnFail
		public RuleCall getOnFailSyncpointOnFailEnumRuleCall_11_0() { return cOnFailSyncpointOnFailEnumRuleCall_11_0; }
		
		//';'
		public Keyword getSemicolonKeyword_12() { return cSemicolonKeyword_12; }
		
		//'faultCond'
		public Keyword getFaultCondKeyword_13() { return cFaultCondKeyword_13; }
		
		//'='
		public Keyword getEqualsSignKeyword_14() { return cEqualsSignKeyword_14; }
		
		//faultCond=FaultCond
		public Assignment getFaultCondAssignment_15() { return cFaultCondAssignment_15; }
		
		//FaultCond
		public RuleCall getFaultCondFaultCondParserRuleCall_15_0() { return cFaultCondFaultCondParserRuleCall_15_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_16() { return cRightParenthesisKeyword_16; }
	}
	public class FaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.Fault");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPointcutKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPointcutAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPointcutSTRINGTerminalRuleCall_5_0 = (RuleCall)cPointcutAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cExecParamsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExecParamsExecParamsParserRuleCall_7_0 = (RuleCall)cExecParamsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Fault:
		//    'Fault' name=ID '{' 'pointcut' '=' pointcut=STRING ';' (execParams+=ExecParams)* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Fault' name=ID '{' 'pointcut' '=' pointcut=STRING ';' (execParams+=ExecParams)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Fault'
		public Keyword getFaultKeyword_0() { return cFaultKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'pointcut'
		public Keyword getPointcutKeyword_3() { return cPointcutKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//pointcut=STRING
		public Assignment getPointcutAssignment_5() { return cPointcutAssignment_5; }
		
		//STRING
		public RuleCall getPointcutSTRINGTerminalRuleCall_5_0() { return cPointcutSTRINGTerminalRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//(execParams+=ExecParams)*
		public Assignment getExecParamsAssignment_7() { return cExecParamsAssignment_7; }
		
		//ExecParams
		public RuleCall getExecParamsExecParamsParserRuleCall_7_0() { return cExecParamsExecParamsParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ExecParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.ExecParams");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExecParamsKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExecParamsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cWhereKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cWhereAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cWhereJOIN_TYPEEnumRuleCall_1_5_0 = (RuleCall)cWhereAssignment_1_5.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Keyword cSemicolonKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Keyword cWhenToExecuteKeyword_1_6_1 = (Keyword)cGroup_1_6.eContents().get(1);
		private final Assignment cWhenAssignment_1_6_2 = (Assignment)cGroup_1_6.eContents().get(2);
		private final RuleCall cWhenWhenParserRuleCall_1_6_2_0 = (RuleCall)cWhenAssignment_1_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_6_3 = (Keyword)cGroup_1_6.eContents().get(3);
		private final Keyword cSemicolonKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Keyword cWhatToExecuteKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final Assignment cWhatAssignment_1_9 = (Assignment)cGroup_1.eContents().get(9);
		private final RuleCall cWhatWhatParserRuleCall_1_9_0 = (RuleCall)cWhatAssignment_1_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_10 = (Keyword)cGroup_1.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_1_11 = (Keyword)cGroup_1.eContents().get(11);
		
		//ExecParams:
		//    'ExecParams' '(' name=ID ')' | 'ExecParams' (name=ID)? '{' 'where' '=' where=JOIN_TYPE (';' 'whenToExecute{' when=When '}')? ';' 'whatToExecute{' what=What '}'  '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ExecParams' '(' name=ID ')' | 'ExecParams' (name=ID)? '{' 'where' '=' where=JOIN_TYPE (';' 'whenToExecute{' when=When '}')? ';' 'whatToExecute{' what=What '}'  '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ExecParams' '(' name=ID ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'ExecParams'
		public Keyword getExecParamsKeyword_0_0() { return cExecParamsKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//'ExecParams' (name=ID)? '{' 'where' '=' where=JOIN_TYPE (';' 'whenToExecute{' when=When '}')? ';' 'whatToExecute{' what=What '}'  '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'ExecParams'
		public Keyword getExecParamsKeyword_1_0() { return cExecParamsKeyword_1_0; }
		
		//(name=ID)?
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }
		
		//'where'
		public Keyword getWhereKeyword_1_3() { return cWhereKeyword_1_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_4() { return cEqualsSignKeyword_1_4; }
		
		//where=JOIN_TYPE
		public Assignment getWhereAssignment_1_5() { return cWhereAssignment_1_5; }
		
		//JOIN_TYPE
		public RuleCall getWhereJOIN_TYPEEnumRuleCall_1_5_0() { return cWhereJOIN_TYPEEnumRuleCall_1_5_0; }
		
		//(';' 'whenToExecute{' when=When '}')?
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//';'
		public Keyword getSemicolonKeyword_1_6_0() { return cSemicolonKeyword_1_6_0; }
		
		//'whenToExecute{'
		public Keyword getWhenToExecuteKeyword_1_6_1() { return cWhenToExecuteKeyword_1_6_1; }
		
		//when=When
		public Assignment getWhenAssignment_1_6_2() { return cWhenAssignment_1_6_2; }
		
		//When
		public RuleCall getWhenWhenParserRuleCall_1_6_2_0() { return cWhenWhenParserRuleCall_1_6_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_6_3() { return cRightCurlyBracketKeyword_1_6_3; }
		
		//';'
		public Keyword getSemicolonKeyword_1_7() { return cSemicolonKeyword_1_7; }
		
		//'whatToExecute{'
		public Keyword getWhatToExecuteKeyword_1_8() { return cWhatToExecuteKeyword_1_8; }
		
		//what=What
		public Assignment getWhatAssignment_1_9() { return cWhatAssignment_1_9; }
		
		//What
		public RuleCall getWhatWhatParserRuleCall_1_9_0() { return cWhatWhatParserRuleCall_1_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_10() { return cRightCurlyBracketKeyword_1_10; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_11() { return cRightCurlyBracketKeyword_1_11; }
	}
	public class WhatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.What");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCodeBlockAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCodeBlockCodeBlockParserRuleCall_0_0 = (RuleCall)cCodeBlockAssignment_0.eContents().get(0);
		private final Assignment cSleepAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSleepSleepParserRuleCall_1_0 = (RuleCall)cSleepAssignment_1.eContents().get(0);
		private final Assignment cExitAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cExitExitParserRuleCall_2_0 = (RuleCall)cExitAssignment_2.eContents().get(0);
		private final Assignment cBigPacketFaultAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cBigPacketFaultBigPacketFaultParserRuleCall_3_0 = (RuleCall)cBigPacketFaultAssignment_3.eContents().get(0);
		private final Assignment cLeakFaultAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cLeakFaultLeakFaultParserRuleCall_4_0 = (RuleCall)cLeakFaultAssignment_4.eContents().get(0);
		private final Assignment cAlterPacketFaultAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cAlterPacketFaultAlterPacketFaultParserRuleCall_5_0 = (RuleCall)cAlterPacketFaultAssignment_5.eContents().get(0);
		private final Assignment cCpuLoaderAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cCpuLoaderCPULoaderParserRuleCall_6_0 = (RuleCall)cCpuLoaderAssignment_6.eContents().get(0);
		private final Assignment cSkipExecutionAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cSkipExecutionSkipExecutionParserRuleCall_7_0 = (RuleCall)cSkipExecutionAssignment_7.eContents().get(0);
		private final Assignment cRepeatExecutionAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cRepeatExecutionRepeatExecutionParserRuleCall_8_0 = (RuleCall)cRepeatExecutionAssignment_8.eContents().get(0);
		
		//What:
		//    codeBlock = CodeBlock | sleep = Sleep | exit = Exit | bigPacketFault = BigPacketFault | leakFault = LeakFault | alterPacketFault = AlterPacketFault | cpuLoader=CPULoader | skipExecution=SkipExecution | repeatExecution=RepeatExecution
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//codeBlock = CodeBlock | sleep = Sleep | exit = Exit | bigPacketFault = BigPacketFault | leakFault = LeakFault | alterPacketFault = AlterPacketFault | cpuLoader=CPULoader | skipExecution=SkipExecution | repeatExecution=RepeatExecution
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//codeBlock = CodeBlock
		public Assignment getCodeBlockAssignment_0() { return cCodeBlockAssignment_0; }
		
		//CodeBlock
		public RuleCall getCodeBlockCodeBlockParserRuleCall_0_0() { return cCodeBlockCodeBlockParserRuleCall_0_0; }
		
		//sleep = Sleep
		public Assignment getSleepAssignment_1() { return cSleepAssignment_1; }
		
		//Sleep
		public RuleCall getSleepSleepParserRuleCall_1_0() { return cSleepSleepParserRuleCall_1_0; }
		
		//exit = Exit
		public Assignment getExitAssignment_2() { return cExitAssignment_2; }
		
		//Exit
		public RuleCall getExitExitParserRuleCall_2_0() { return cExitExitParserRuleCall_2_0; }
		
		//bigPacketFault = BigPacketFault
		public Assignment getBigPacketFaultAssignment_3() { return cBigPacketFaultAssignment_3; }
		
		//BigPacketFault
		public RuleCall getBigPacketFaultBigPacketFaultParserRuleCall_3_0() { return cBigPacketFaultBigPacketFaultParserRuleCall_3_0; }
		
		//leakFault = LeakFault
		public Assignment getLeakFaultAssignment_4() { return cLeakFaultAssignment_4; }
		
		//LeakFault
		public RuleCall getLeakFaultLeakFaultParserRuleCall_4_0() { return cLeakFaultLeakFaultParserRuleCall_4_0; }
		
		//alterPacketFault = AlterPacketFault
		public Assignment getAlterPacketFaultAssignment_5() { return cAlterPacketFaultAssignment_5; }
		
		//AlterPacketFault
		public RuleCall getAlterPacketFaultAlterPacketFaultParserRuleCall_5_0() { return cAlterPacketFaultAlterPacketFaultParserRuleCall_5_0; }
		
		//cpuLoader=CPULoader
		public Assignment getCpuLoaderAssignment_6() { return cCpuLoaderAssignment_6; }
		
		//CPULoader
		public RuleCall getCpuLoaderCPULoaderParserRuleCall_6_0() { return cCpuLoaderCPULoaderParserRuleCall_6_0; }
		
		//skipExecution=SkipExecution
		public Assignment getSkipExecutionAssignment_7() { return cSkipExecutionAssignment_7; }
		
		//SkipExecution
		public RuleCall getSkipExecutionSkipExecutionParserRuleCall_7_0() { return cSkipExecutionSkipExecutionParserRuleCall_7_0; }
		
		//repeatExecution=RepeatExecution
		public Assignment getRepeatExecutionAssignment_8() { return cRepeatExecutionAssignment_8; }
		
		//RepeatExecution
		public RuleCall getRepeatExecutionRepeatExecutionParserRuleCall_8_0() { return cRepeatExecutionRepeatExecutionParserRuleCall_8_0; }
	}
	public class RepeatExecutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.RepeatExecution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatExecutionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTimesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimesINTTerminalRuleCall_2_0 = (RuleCall)cTimesAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RepeatExecution:
		//    'repeatExecution' '(' times=INT ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'repeatExecution' '(' times=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'repeatExecution'
		public Keyword getRepeatExecutionKeyword_0() { return cRepeatExecutionKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//times=INT
		public Assignment getTimesAssignment_2() { return cTimesAssignment_2; }
		
		//INT
		public RuleCall getTimesINTTerminalRuleCall_2_0() { return cTimesINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SkipExecutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.SkipExecution");
		private final Keyword cSkipExecutionKeyword = (Keyword)rule.eContents().get(1);
		
		//SkipExecution:
		//     'skipExecution'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'skipExecution'
		public Keyword getSkipExecutionKeyword() { return cSkipExecutionKeyword; }
	}
	public class AlterPacketFaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.AlterPacketFault");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlterPacketFaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOriginalDataAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOriginalDataINTTerminalRuleCall_2_0 = (RuleCall)cOriginalDataAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cKindOfAlterationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKindOfAlterationAlterPacketFaultTypeEnumRuleCall_4_0 = (RuleCall)cKindOfAlterationAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AlterPacketFault:
		//    'alterPacketFault' '(' originalData = INT ',' kindOfAlteration = AlterPacketFaultType ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'alterPacketFault' '(' originalData = INT ',' kindOfAlteration = AlterPacketFaultType ')'
		public Group getGroup() { return cGroup; }
		
		//'alterPacketFault'
		public Keyword getAlterPacketFaultKeyword_0() { return cAlterPacketFaultKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//originalData = INT
		public Assignment getOriginalDataAssignment_2() { return cOriginalDataAssignment_2; }
		
		//INT
		public RuleCall getOriginalDataINTTerminalRuleCall_2_0() { return cOriginalDataINTTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//kindOfAlteration = AlterPacketFaultType
		public Assignment getKindOfAlterationAssignment_4() { return cKindOfAlterationAssignment_4; }
		
		//AlterPacketFaultType
		public RuleCall getKindOfAlterationAlterPacketFaultTypeEnumRuleCall_4_0() { return cKindOfAlterationAlterPacketFaultTypeEnumRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class LeakFaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.LeakFault");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeakFaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNrofLeaksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNrofLeaksINTTerminalRuleCall_2_0 = (RuleCall)cNrofLeaksAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LeakFault:
		//    'leakFault' '(' nrofLeaks = INT ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'leakFault' '(' nrofLeaks = INT ')'
		public Group getGroup() { return cGroup; }
		
		//'leakFault'
		public Keyword getLeakFaultKeyword_0() { return cLeakFaultKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//nrofLeaks = INT
		public Assignment getNrofLeaksAssignment_2() { return cNrofLeaksAssignment_2; }
		
		//INT
		public RuleCall getNrofLeaksINTTerminalRuleCall_2_0() { return cNrofLeaksINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class BigPacketFaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.BigPacketFault");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBigPacketFaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOriginalDataAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOriginalDataINTTerminalRuleCall_2_0 = (RuleCall)cOriginalDataAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTimesLargerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTimesLargerINTTerminalRuleCall_4_0 = (RuleCall)cTimesLargerAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BigPacketFault:
		//    'bigPacketFault' '(' originalData = INT ',' timesLarger = INT ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'bigPacketFault' '(' originalData = INT ',' timesLarger = INT ')'
		public Group getGroup() { return cGroup; }
		
		//'bigPacketFault'
		public Keyword getBigPacketFaultKeyword_0() { return cBigPacketFaultKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//originalData = INT
		public Assignment getOriginalDataAssignment_2() { return cOriginalDataAssignment_2; }
		
		//INT
		public RuleCall getOriginalDataINTTerminalRuleCall_2_0() { return cOriginalDataINTTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//timesLarger = INT
		public Assignment getTimesLargerAssignment_4() { return cTimesLargerAssignment_4; }
		
		//INT
		public RuleCall getTimesLargerINTTerminalRuleCall_4_0() { return cTimesLargerINTTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ExitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.Exit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeINTTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Exit:
		//    'exit' '(' type=INT ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'exit' '(' type=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'exit'
		public Keyword getExitKeyword_0() { return cExitKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//type=INT
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//INT
		public RuleCall getTypeINTTerminalRuleCall_2_0() { return cTypeINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SleepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.Sleep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSleepKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeINTTerminalRuleCall_2_0 = (RuleCall)cTimeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Sleep:
		//    'sleep' '(' time=INT ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'sleep' '(' time=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'sleep'
		public Keyword getSleepKeyword_0() { return cSleepKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//time=INT
		public Assignment getTimeAssignment_2() { return cTimeAssignment_2; }
		
		//INT
		public RuleCall getTimeINTTerminalRuleCall_2_0() { return cTimeINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class CPULoaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.CPULoader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCpuLoaderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAmountAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAmountINTTerminalRuleCall_2_0 = (RuleCall)cAmountAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CPULoader:
		//    'cpuLoader' '(' amount=INT ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'cpuLoader' '(' amount=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'cpuLoader'
		public Keyword getCpuLoaderKeyword_0() { return cCpuLoaderKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//amount=INT
		public Assignment getAmountAssignment_2() { return cAmountAssignment_2; }
		
		//INT
		public RuleCall getAmountINTTerminalRuleCall_2_0() { return cAmountINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class CodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.CodeBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cBlockIDKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCodeBlockKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cImportsKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cImportsAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cImportsCODE_BOXTerminalRuleCall_1_3_2_0 = (RuleCall)cImportsAssignment_1_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3_3 = (Keyword)cGroup_1_3.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_4 = (Keyword)cGroup_1_3.eContents().get(4);
		private final Keyword cCodeKeyword_1_3_5 = (Keyword)cGroup_1_3.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_1_3_6 = (Keyword)cGroup_1_3.eContents().get(6);
		private final Assignment cCodeAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cCodeCODE_BOXTerminalRuleCall_1_4_0 = (RuleCall)cCodeAssignment_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//CodeBlock:
		//    ('BlockID' '(' name=ID ')') | ('CodeBlock' (name=ID)? '{' ('imports' '{' imports=CODE_BOX '}' ',' 'code' '{')? code=CODE_BOX '}')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('BlockID' '(' name=ID ')') | ('CodeBlock' (name=ID)? '{' ('imports' '{' imports=CODE_BOX '}' ',' 'code' '{')? code=CODE_BOX '}')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('BlockID' '(' name=ID ')')
		public Group getGroup_0() { return cGroup_0; }
		
		//'BlockID'
		public Keyword getBlockIDKeyword_0_0() { return cBlockIDKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//('CodeBlock' (name=ID)? '{' ('imports' '{' imports=CODE_BOX '}' ',' 'code' '{')? code=CODE_BOX '}')
		public Group getGroup_1() { return cGroup_1; }
		
		//'CodeBlock'
		public Keyword getCodeBlockKeyword_1_0() { return cCodeBlockKeyword_1_0; }
		
		//(name=ID)?
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }
		
		//('imports' '{' imports=CODE_BOX '}' ',' 'code' '{')?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'imports'
		public Keyword getImportsKeyword_1_3_0() { return cImportsKeyword_1_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_3_1() { return cLeftCurlyBracketKeyword_1_3_1; }
		
		//imports=CODE_BOX
		public Assignment getImportsAssignment_1_3_2() { return cImportsAssignment_1_3_2; }
		
		//CODE_BOX
		public RuleCall getImportsCODE_BOXTerminalRuleCall_1_3_2_0() { return cImportsCODE_BOXTerminalRuleCall_1_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3_3() { return cRightCurlyBracketKeyword_1_3_3; }
		
		//','
		public Keyword getCommaKeyword_1_3_4() { return cCommaKeyword_1_3_4; }
		
		//'code'
		public Keyword getCodeKeyword_1_3_5() { return cCodeKeyword_1_3_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_3_6() { return cLeftCurlyBracketKeyword_1_3_6; }
		
		//code=CODE_BOX
		public Assignment getCodeAssignment_1_4() { return cCodeAssignment_1_4; }
		
		//CODE_BOX
		public RuleCall getCodeCODE_BOXTerminalRuleCall_1_4_0() { return cCodeCODE_BOXTerminalRuleCall_1_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_5() { return cRightCurlyBracketKeyword_1_5; }
	}
	public class FaultCondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.FaultCond");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFaultCondKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFaultCondKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cWhereAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cWhereWhereParserRuleCall_1_3_0 = (RuleCall)cWhereAssignment_1_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Keyword cWhenToIncrementKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cWhenAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cWhenWhenParserRuleCall_1_5_1_0 = (RuleCall)cWhenAssignment_1_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_5_2 = (Keyword)cGroup_1_5.eContents().get(2);
		private final Assignment cExtraDataAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cExtraDataCodeBlockParserRuleCall_1_6_0 = (RuleCall)cExtraDataAssignment_1_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		
		//FaultCond:
		//    ('FaultCond' name=ID) | ('FaultCond' (name=ID)? '{' where=Where ';' ('whenToIncrement{' when=When '}')? (extraData=CodeBlock)? '}')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('FaultCond' name=ID) | ('FaultCond' (name=ID)? '{' where=Where ';' ('whenToIncrement{' when=When '}')? (extraData=CodeBlock)? '}')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('FaultCond' name=ID)
		public Group getGroup_0() { return cGroup_0; }
		
		//'FaultCond'
		public Keyword getFaultCondKeyword_0_0() { return cFaultCondKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//('FaultCond' (name=ID)? '{' where=Where ';' ('whenToIncrement{' when=When '}')? (extraData=CodeBlock)? '}')
		public Group getGroup_1() { return cGroup_1; }
		
		//'FaultCond'
		public Keyword getFaultCondKeyword_1_0() { return cFaultCondKeyword_1_0; }
		
		//(name=ID)?
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }
		
		//where=Where
		public Assignment getWhereAssignment_1_3() { return cWhereAssignment_1_3; }
		
		//Where
		public RuleCall getWhereWhereParserRuleCall_1_3_0() { return cWhereWhereParserRuleCall_1_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }
		
		//('whenToIncrement{' when=When '}')?
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//'whenToIncrement{'
		public Keyword getWhenToIncrementKeyword_1_5_0() { return cWhenToIncrementKeyword_1_5_0; }
		
		//when=When
		public Assignment getWhenAssignment_1_5_1() { return cWhenAssignment_1_5_1; }
		
		//When
		public RuleCall getWhenWhenParserRuleCall_1_5_1_0() { return cWhenWhenParserRuleCall_1_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_5_2() { return cRightCurlyBracketKeyword_1_5_2; }
		
		//(extraData=CodeBlock)?
		public Assignment getExtraDataAssignment_1_6() { return cExtraDataAssignment_1_6; }
		
		//CodeBlock
		public RuleCall getExtraDataCodeBlockParserRuleCall_1_6_0() { return cExtraDataCodeBlockParserRuleCall_1_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_7() { return cRightCurlyBracketKeyword_1_7; }
	}
	public class WhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.When");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBetweenRoundsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBetweenRoundsBetweenRoundsParserRuleCall_0_0 = (RuleCall)cBetweenRoundsAssignment_0.eContents().get(0);
		private final Assignment cBetweenSecondsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBetweenSecondsBetweenSecondsParserRuleCall_1_0 = (RuleCall)cBetweenSecondsAssignment_1.eContents().get(0);
		private final Assignment cRandomAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cRandomRandomParserRuleCall_2_0 = (RuleCall)cRandomAssignment_2.eContents().get(0);
		private final Assignment cRandomBetweenRoundAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cRandomBetweenRoundRandomBetweenRoundParserRuleCall_3_0 = (RuleCall)cRandomBetweenRoundAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cIfConditionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cIfConditionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cIfConditionConditionParserRuleCall_4_2_0 = (RuleCall)cIfConditionAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cFaultCondAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cFaultCondFaultCondParserRuleCall_5_0 = (RuleCall)cFaultCondAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cSyncpointKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cSyncpointAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cSyncpointIDTerminalRuleCall_6_2_0 = (RuleCall)cSyncpointAssignment_6_2.eContents().get(0);
		
		//When:
		//     ( betweenRounds = betweenRounds | betweenSeconds = betweenSeconds | random = Random | randomBetweenRound = randomBetweenRound | 'ifCondition' '(' ifCondition=Condition ')' | faultCond=FaultCond | 'syncpoint' '=' syncpoint=ID)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( betweenRounds = betweenRounds | betweenSeconds = betweenSeconds | random = Random | randomBetweenRound = randomBetweenRound | 'ifCondition' '(' ifCondition=Condition ')' | faultCond=FaultCond | 'syncpoint' '=' syncpoint=ID)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//betweenRounds = betweenRounds
		public Assignment getBetweenRoundsAssignment_0() { return cBetweenRoundsAssignment_0; }
		
		//betweenRounds
		public RuleCall getBetweenRoundsBetweenRoundsParserRuleCall_0_0() { return cBetweenRoundsBetweenRoundsParserRuleCall_0_0; }
		
		//betweenSeconds = betweenSeconds
		public Assignment getBetweenSecondsAssignment_1() { return cBetweenSecondsAssignment_1; }
		
		//betweenSeconds
		public RuleCall getBetweenSecondsBetweenSecondsParserRuleCall_1_0() { return cBetweenSecondsBetweenSecondsParserRuleCall_1_0; }
		
		//random = Random
		public Assignment getRandomAssignment_2() { return cRandomAssignment_2; }
		
		//Random
		public RuleCall getRandomRandomParserRuleCall_2_0() { return cRandomRandomParserRuleCall_2_0; }
		
		//randomBetweenRound = randomBetweenRound
		public Assignment getRandomBetweenRoundAssignment_3() { return cRandomBetweenRoundAssignment_3; }
		
		//randomBetweenRound
		public RuleCall getRandomBetweenRoundRandomBetweenRoundParserRuleCall_3_0() { return cRandomBetweenRoundRandomBetweenRoundParserRuleCall_3_0; }
		
		//'ifCondition' '(' ifCondition=Condition ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'ifCondition'
		public Keyword getIfConditionKeyword_4_0() { return cIfConditionKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//ifCondition=Condition
		public Assignment getIfConditionAssignment_4_2() { return cIfConditionAssignment_4_2; }
		
		//Condition
		public RuleCall getIfConditionConditionParserRuleCall_4_2_0() { return cIfConditionConditionParserRuleCall_4_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//faultCond=FaultCond
		public Assignment getFaultCondAssignment_5() { return cFaultCondAssignment_5; }
		
		//FaultCond
		public RuleCall getFaultCondFaultCondParserRuleCall_5_0() { return cFaultCondFaultCondParserRuleCall_5_0; }
		
		//'syncpoint' '=' syncpoint=ID
		public Group getGroup_6() { return cGroup_6; }
		
		//'syncpoint'
		public Keyword getSyncpointKeyword_6_0() { return cSyncpointKeyword_6_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_1() { return cEqualsSignKeyword_6_1; }
		
		//syncpoint=ID
		public Assignment getSyncpointAssignment_6_2() { return cSyncpointAssignment_6_2; }
		
		//ID
		public RuleCall getSyncpointIDTerminalRuleCall_6_2_0() { return cSyncpointIDTerminalRuleCall_6_2_0; }
	}
	public class RandomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.Random");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRandomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cChanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cChanceINTTerminalRuleCall_2_0 = (RuleCall)cChanceAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Random:
		//    'random' '(' chance = INT ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'random' '(' chance = INT ')'
		public Group getGroup() { return cGroup; }
		
		//'random'
		public Keyword getRandomKeyword_0() { return cRandomKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//chance = INT
		public Assignment getChanceAssignment_2() { return cChanceAssignment_2; }
		
		//INT
		public RuleCall getChanceINTTerminalRuleCall_2_0() { return cChanceINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class BetweenSecondsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.betweenSeconds");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBetweenSecondsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartINTTerminalRuleCall_2_0 = (RuleCall)cStartAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndINTTerminalRuleCall_4_0 = (RuleCall)cEndAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//betweenSeconds:
		//    'betweenSeconds' '(' start = INT ',' end = INT ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'betweenSeconds' '(' start = INT ',' end = INT ')'
		public Group getGroup() { return cGroup; }
		
		//'betweenSeconds'
		public Keyword getBetweenSecondsKeyword_0() { return cBetweenSecondsKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//start = INT
		public Assignment getStartAssignment_2() { return cStartAssignment_2; }
		
		//INT
		public RuleCall getStartINTTerminalRuleCall_2_0() { return cStartINTTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//end = INT
		public Assignment getEndAssignment_4() { return cEndAssignment_4; }
		
		//INT
		public RuleCall getEndINTTerminalRuleCall_4_0() { return cEndINTTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class BetweenRoundsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.betweenRounds");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBetweenRoundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartINTTerminalRuleCall_2_0 = (RuleCall)cStartAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndINTTerminalRuleCall_4_0 = (RuleCall)cEndAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIntervalAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIntervalINTTerminalRuleCall_6_0 = (RuleCall)cIntervalAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cConditionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_7_1_0 = (RuleCall)cConditionAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cRandomAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cRandomRandomParserRuleCall_8_1_0 = (RuleCall)cRandomAssignment_8_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//betweenRounds:
		//    'betweenRound' '(' start = INT ',' end = INT ',' interval = INT (',' condition=Condition)? (',' random = Random)?')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'betweenRound' '(' start = INT ',' end = INT ',' interval = INT (',' condition=Condition)? (',' random = Random)?')'
		public Group getGroup() { return cGroup; }
		
		//'betweenRound'
		public Keyword getBetweenRoundKeyword_0() { return cBetweenRoundKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//start = INT
		public Assignment getStartAssignment_2() { return cStartAssignment_2; }
		
		//INT
		public RuleCall getStartINTTerminalRuleCall_2_0() { return cStartINTTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//end = INT
		public Assignment getEndAssignment_4() { return cEndAssignment_4; }
		
		//INT
		public RuleCall getEndINTTerminalRuleCall_4_0() { return cEndINTTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//interval = INT
		public Assignment getIntervalAssignment_6() { return cIntervalAssignment_6; }
		
		//INT
		public RuleCall getIntervalINTTerminalRuleCall_6_0() { return cIntervalINTTerminalRuleCall_6_0; }
		
		//(',' condition=Condition)?
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_7_1() { return cConditionAssignment_7_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_7_1_0() { return cConditionConditionParserRuleCall_7_1_0; }
		
		//(',' random = Random)?
		public Group getGroup_8() { return cGroup_8; }
		
		//','
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//random = Random
		public Assignment getRandomAssignment_8_1() { return cRandomAssignment_8_1; }
		
		//Random
		public RuleCall getRandomRandomParserRuleCall_8_1_0() { return cRandomRandomParserRuleCall_8_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class RandomBetweenRoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.randomBetweenRound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRandomBetweenRoundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartINTTerminalRuleCall_2_0 = (RuleCall)cStartAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndINTTerminalRuleCall_4_0 = (RuleCall)cEndAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIntervalAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIntervalINTTerminalRuleCall_6_0 = (RuleCall)cIntervalAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cChanceAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cChanceINTTerminalRuleCall_8_0 = (RuleCall)cChanceAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//randomBetweenRound:
		//    'randomBetweenRound' '(' start = INT ',' end = INT ',' interval = INT ',' chance = INT ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'randomBetweenRound' '(' start = INT ',' end = INT ',' interval = INT ',' chance = INT ')'
		public Group getGroup() { return cGroup; }
		
		//'randomBetweenRound'
		public Keyword getRandomBetweenRoundKeyword_0() { return cRandomBetweenRoundKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//start = INT
		public Assignment getStartAssignment_2() { return cStartAssignment_2; }
		
		//INT
		public RuleCall getStartINTTerminalRuleCall_2_0() { return cStartINTTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//end = INT
		public Assignment getEndAssignment_4() { return cEndAssignment_4; }
		
		//INT
		public RuleCall getEndINTTerminalRuleCall_4_0() { return cEndINTTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//interval = INT
		public Assignment getIntervalAssignment_6() { return cIntervalAssignment_6; }
		
		//INT
		public RuleCall getIntervalINTTerminalRuleCall_6_0() { return cIntervalINTTerminalRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//chance = INT
		public Assignment getChanceAssignment_8() { return cChanceAssignment_8; }
		
		//INT
		public RuleCall getChanceINTTerminalRuleCall_8_0() { return cChanceINTTerminalRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCondIDKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cConditionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cImportsKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cImportsAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cImportsCODE_BOXTerminalRuleCall_1_3_2_0 = (RuleCall)cImportsAssignment_1_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3_3 = (Keyword)cGroup_1_3.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_4 = (Keyword)cGroup_1_3.eContents().get(4);
		private final Keyword cCodeKeyword_1_3_5 = (Keyword)cGroup_1_3.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_1_3_6 = (Keyword)cGroup_1_3.eContents().get(6);
		private final Assignment cCodeAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cCodeCODE_BOXTerminalRuleCall_1_4_0 = (RuleCall)cCodeAssignment_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//Condition:
		//    ('CondID' '(' name=ID ')') | ('Condition' (name=ID)? '{' ('imports' '{' imports=CODE_BOX '}' ',' 'code' '{')? code=CODE_BOX '}')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('CondID' '(' name=ID ')') | ('Condition' (name=ID)? '{' ('imports' '{' imports=CODE_BOX '}' ',' 'code' '{')? code=CODE_BOX '}')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('CondID' '(' name=ID ')')
		public Group getGroup_0() { return cGroup_0; }
		
		//'CondID'
		public Keyword getCondIDKeyword_0_0() { return cCondIDKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//('Condition' (name=ID)? '{' ('imports' '{' imports=CODE_BOX '}' ',' 'code' '{')? code=CODE_BOX '}')
		public Group getGroup_1() { return cGroup_1; }
		
		//'Condition'
		public Keyword getConditionKeyword_1_0() { return cConditionKeyword_1_0; }
		
		//(name=ID)?
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }
		
		//('imports' '{' imports=CODE_BOX '}' ',' 'code' '{')?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'imports'
		public Keyword getImportsKeyword_1_3_0() { return cImportsKeyword_1_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_3_1() { return cLeftCurlyBracketKeyword_1_3_1; }
		
		//imports=CODE_BOX
		public Assignment getImportsAssignment_1_3_2() { return cImportsAssignment_1_3_2; }
		
		//CODE_BOX
		public RuleCall getImportsCODE_BOXTerminalRuleCall_1_3_2_0() { return cImportsCODE_BOXTerminalRuleCall_1_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3_3() { return cRightCurlyBracketKeyword_1_3_3; }
		
		//','
		public Keyword getCommaKeyword_1_3_4() { return cCommaKeyword_1_3_4; }
		
		//'code'
		public Keyword getCodeKeyword_1_3_5() { return cCodeKeyword_1_3_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_3_6() { return cLeftCurlyBracketKeyword_1_3_6; }
		
		//code=CODE_BOX
		public Assignment getCodeAssignment_1_4() { return cCodeAssignment_1_4; }
		
		//CODE_BOX
		public RuleCall getCodeCODE_BOXTerminalRuleCall_1_4_0() { return cCodeCODE_BOXTerminalRuleCall_1_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_5() { return cRightCurlyBracketKeyword_1_5; }
	}
	public class WhereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.Where");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhereToExecuteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cJoinTypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cJoinTypeJOIN_TYPEEnumRuleCall_2_0_0 = (RuleCall)cJoinTypeAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Where:
		//    'whereToExecute' '{'(joinType=JOIN_TYPE ';')? name=STRING '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'whereToExecute' '{'(joinType=JOIN_TYPE ';')? name=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//'whereToExecute'
		public Keyword getWhereToExecuteKeyword_0() { return cWhereToExecuteKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(joinType=JOIN_TYPE ';')?
		public Group getGroup_2() { return cGroup_2; }
		
		//joinType=JOIN_TYPE
		public Assignment getJoinTypeAssignment_2_0() { return cJoinTypeAssignment_2_0; }
		
		//JOIN_TYPE
		public RuleCall getJoinTypeJOIN_TYPEEnumRuleCall_2_0_0() { return cJoinTypeJOIN_TYPEEnumRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//name=STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	public class SyncpointOnFailElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.syncpointOnFail");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cContinueEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cContinueContinueKeyword_0_0 = (Keyword)cContinueEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRetryEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRetryRetryKeyword_1_0 = (Keyword)cRetryEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum syncpointOnFail:
		//    continue='continue' | retry = 'retry'
		//;
		public EnumRule getRule() { return rule; }
		
		//continue='continue' | retry = 'retry'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//continue='continue'
		public EnumLiteralDeclaration getContinueEnumLiteralDeclaration_0() { return cContinueEnumLiteralDeclaration_0; }
		
		//'continue'
		public Keyword getContinueContinueKeyword_0_0() { return cContinueContinueKeyword_0_0; }
		
		//retry = 'retry'
		public EnumLiteralDeclaration getRetryEnumLiteralDeclaration_1() { return cRetryEnumLiteralDeclaration_1; }
		
		//'retry'
		public Keyword getRetryRetryKeyword_1_0() { return cRetryRetryKeyword_1_0; }
	}
	public class SyncpointTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.syncpointType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOneTimeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOneTimeOnetimeKeyword_0_0 = (Keyword)cOneTimeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRecurrentEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRecurrentRecurrentKeyword_1_0 = (Keyword)cRecurrentEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum syncpointType:
		//    oneTime='onetime'| Recurrent='recurrent'
		//;
		public EnumRule getRule() { return rule; }
		
		//oneTime='onetime'| Recurrent='recurrent'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//oneTime='onetime'
		public EnumLiteralDeclaration getOneTimeEnumLiteralDeclaration_0() { return cOneTimeEnumLiteralDeclaration_0; }
		
		//'onetime'
		public Keyword getOneTimeOnetimeKeyword_0_0() { return cOneTimeOnetimeKeyword_0_0; }
		
		//Recurrent='recurrent'
		public EnumLiteralDeclaration getRecurrentEnumLiteralDeclaration_1() { return cRecurrentEnumLiteralDeclaration_1; }
		
		//'recurrent'
		public Keyword getRecurrentRecurrentKeyword_1_0() { return cRecurrentRecurrentKeyword_1_0; }
	}
	public class AlterPacketFaultTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.AlterPacketFaultType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRANDOMEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRANDOMRandomKeyword_0_0 = (Keyword)cRANDOMEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cZEROEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cZEROZeroKeyword_1_0 = (Keyword)cZEROEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AlterPacketFaultType:
		//    RANDOM='random' | ZERO='zero'
		//;
		public EnumRule getRule() { return rule; }
		
		//RANDOM='random' | ZERO='zero'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RANDOM='random'
		public EnumLiteralDeclaration getRANDOMEnumLiteralDeclaration_0() { return cRANDOMEnumLiteralDeclaration_0; }
		
		//'random'
		public Keyword getRANDOMRandomKeyword_0_0() { return cRANDOMRandomKeyword_0_0; }
		
		//ZERO='zero'
		public EnumLiteralDeclaration getZEROEnumLiteralDeclaration_1() { return cZEROEnumLiteralDeclaration_1; }
		
		//'zero'
		public Keyword getZEROZeroKeyword_1_0() { return cZEROZeroKeyword_1_0; }
	}
	public class JOIN_TYPEElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.JOIN_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBEFOREEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBEFOREBeforeKeyword_0_0 = (Keyword)cBEFOREEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAFTEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAFTERAfterKeyword_1_0 = (Keyword)cAFTEREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum JOIN_TYPE:
		//    BEFORE='Before' | AFTER='After'
		//;
		public EnumRule getRule() { return rule; }
		
		//BEFORE='Before' | AFTER='After'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BEFORE='Before'
		public EnumLiteralDeclaration getBEFOREEnumLiteralDeclaration_0() { return cBEFOREEnumLiteralDeclaration_0; }
		
		//'Before'
		public Keyword getBEFOREBeforeKeyword_0_0() { return cBEFOREBeforeKeyword_0_0; }
		
		//AFTER='After'
		public EnumLiteralDeclaration getAFTEREnumLiteralDeclaration_1() { return cAFTEREnumLiteralDeclaration_1; }
		
		//'After'
		public Keyword getAFTERAfterKeyword_1_0() { return cAFTERAfterKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final TypesElements pTypes;
	private final RunConfigurationElements pRunConfiguration;
	private final NodeElements pNode;
	private final LogElements pLog;
	private final SyncpointElements pSyncpoint;
	private final SyncpointOnFailElements eSyncpointOnFail;
	private final SyncpointTypeElements eSyncpointType;
	private final FaultElements pFault;
	private final ExecParamsElements pExecParams;
	private final WhatElements pWhat;
	private final RepeatExecutionElements pRepeatExecution;
	private final SkipExecutionElements pSkipExecution;
	private final AlterPacketFaultElements pAlterPacketFault;
	private final AlterPacketFaultTypeElements eAlterPacketFaultType;
	private final LeakFaultElements pLeakFault;
	private final BigPacketFaultElements pBigPacketFault;
	private final ExitElements pExit;
	private final SleepElements pSleep;
	private final CPULoaderElements pCPULoader;
	private final CodeBlockElements pCodeBlock;
	private final FaultCondElements pFaultCond;
	private final WhenElements pWhen;
	private final RandomElements pRandom;
	private final BetweenSecondsElements pBetweenSeconds;
	private final BetweenRoundsElements pBetweenRounds;
	private final RandomBetweenRoundElements pRandomBetweenRound;
	private final ConditionElements pCondition;
	private final WhereElements pWhere;
	private final JOIN_TYPEElements eJOIN_TYPE;
	private final TerminalRule tCODE_BOX;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AgenGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTypes = new TypesElements();
		this.pRunConfiguration = new RunConfigurationElements();
		this.pNode = new NodeElements();
		this.pLog = new LogElements();
		this.pSyncpoint = new SyncpointElements();
		this.eSyncpointOnFail = new SyncpointOnFailElements();
		this.eSyncpointType = new SyncpointTypeElements();
		this.pFault = new FaultElements();
		this.pExecParams = new ExecParamsElements();
		this.pWhat = new WhatElements();
		this.pRepeatExecution = new RepeatExecutionElements();
		this.pSkipExecution = new SkipExecutionElements();
		this.pAlterPacketFault = new AlterPacketFaultElements();
		this.eAlterPacketFaultType = new AlterPacketFaultTypeElements();
		this.pLeakFault = new LeakFaultElements();
		this.pBigPacketFault = new BigPacketFaultElements();
		this.pExit = new ExitElements();
		this.pSleep = new SleepElements();
		this.pCPULoader = new CPULoaderElements();
		this.pCodeBlock = new CodeBlockElements();
		this.pFaultCond = new FaultCondElements();
		this.pWhen = new WhenElements();
		this.pRandom = new RandomElements();
		this.pBetweenSeconds = new BetweenSecondsElements();
		this.pBetweenRounds = new BetweenRoundsElements();
		this.pRandomBetweenRound = new RandomBetweenRoundElements();
		this.pCondition = new ConditionElements();
		this.pWhere = new WhereElements();
		this.eJOIN_TYPE = new JOIN_TYPEElements();
		this.tCODE_BOX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Agen.CODE_BOX");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Agen".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    (types+=Types)*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Types:
	//    RunConfiguration | Fault | FaultCond | Where | CodeBlock | Condition | Syncpoint | Log
	//;
	public TypesElements getTypesAccess() {
		return pTypes;
	}
	
	public ParserRule getTypesRule() {
		return getTypesAccess().getRule();
	}
	
	//RunConfiguration:
	//    'RunConfiguration' '{' 'CoordinatorLocation' '=' CoordinatorLocation = STRING ';' nodes+=(Node)* '}'
	//;
	public RunConfigurationElements getRunConfigurationAccess() {
		return pRunConfiguration;
	}
	
	public ParserRule getRunConfigurationRule() {
		return getRunConfigurationAccess().getRule();
	}
	
	//Node:
	//    'Node' name=ID '(' 'firstAttachPoint' '=' firstAttachPoint = STRING ';' 'location' '=' nodeLocation=STRING (';' 'logData' '=' logLocations+=ID*)? ';' faultIDs+=(ID)* ')'
	//;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//Log:
	//    'Logging' name=ID '{' faultCond=ID (';' 'extraData' '=' extraData=CodeBlock)? (';' 'stateBasedVariables' '=' stateBased=CodeBlock)? '}'
	//;
	public LogElements getLogAccess() {
		return pLog;
	}
	
	public ParserRule getLogRule() {
		return getLogAccess().getRule();
	}
	
	//Syncpoint:
	//    'Syncpoint' name=ID '(' nodesDependant+=ID* ';' 'type' '=' type=syncpointType ';' 'onFailure' '=' onFail=syncpointOnFail ';' 'faultCond' '=' faultCond=FaultCond ')'
	//;
	public SyncpointElements getSyncpointAccess() {
		return pSyncpoint;
	}
	
	public ParserRule getSyncpointRule() {
		return getSyncpointAccess().getRule();
	}
	
	//enum syncpointOnFail:
	//    continue='continue' | retry = 'retry'
	//;
	public SyncpointOnFailElements getSyncpointOnFailAccess() {
		return eSyncpointOnFail;
	}
	
	public EnumRule getSyncpointOnFailRule() {
		return getSyncpointOnFailAccess().getRule();
	}
	
	//enum syncpointType:
	//    oneTime='onetime'| Recurrent='recurrent'
	//;
	public SyncpointTypeElements getSyncpointTypeAccess() {
		return eSyncpointType;
	}
	
	public EnumRule getSyncpointTypeRule() {
		return getSyncpointTypeAccess().getRule();
	}
	
	//Fault:
	//    'Fault' name=ID '{' 'pointcut' '=' pointcut=STRING ';' (execParams+=ExecParams)* '}'
	//;
	public FaultElements getFaultAccess() {
		return pFault;
	}
	
	public ParserRule getFaultRule() {
		return getFaultAccess().getRule();
	}
	
	//ExecParams:
	//    'ExecParams' '(' name=ID ')' | 'ExecParams' (name=ID)? '{' 'where' '=' where=JOIN_TYPE (';' 'whenToExecute{' when=When '}')? ';' 'whatToExecute{' what=What '}'  '}'
	//;
	public ExecParamsElements getExecParamsAccess() {
		return pExecParams;
	}
	
	public ParserRule getExecParamsRule() {
		return getExecParamsAccess().getRule();
	}
	
	//What:
	//    codeBlock = CodeBlock | sleep = Sleep | exit = Exit | bigPacketFault = BigPacketFault | leakFault = LeakFault | alterPacketFault = AlterPacketFault | cpuLoader=CPULoader | skipExecution=SkipExecution | repeatExecution=RepeatExecution
	//    ;
	public WhatElements getWhatAccess() {
		return pWhat;
	}
	
	public ParserRule getWhatRule() {
		return getWhatAccess().getRule();
	}
	
	//RepeatExecution:
	//    'repeatExecution' '(' times=INT ')'
	//;
	public RepeatExecutionElements getRepeatExecutionAccess() {
		return pRepeatExecution;
	}
	
	public ParserRule getRepeatExecutionRule() {
		return getRepeatExecutionAccess().getRule();
	}
	
	//SkipExecution:
	//     'skipExecution'
	//;
	public SkipExecutionElements getSkipExecutionAccess() {
		return pSkipExecution;
	}
	
	public ParserRule getSkipExecutionRule() {
		return getSkipExecutionAccess().getRule();
	}
	
	//AlterPacketFault:
	//    'alterPacketFault' '(' originalData = INT ',' kindOfAlteration = AlterPacketFaultType ')'
	//;
	public AlterPacketFaultElements getAlterPacketFaultAccess() {
		return pAlterPacketFault;
	}
	
	public ParserRule getAlterPacketFaultRule() {
		return getAlterPacketFaultAccess().getRule();
	}
	
	//enum AlterPacketFaultType:
	//    RANDOM='random' | ZERO='zero'
	//;
	public AlterPacketFaultTypeElements getAlterPacketFaultTypeAccess() {
		return eAlterPacketFaultType;
	}
	
	public EnumRule getAlterPacketFaultTypeRule() {
		return getAlterPacketFaultTypeAccess().getRule();
	}
	
	//LeakFault:
	//    'leakFault' '(' nrofLeaks = INT ')'
	//;
	public LeakFaultElements getLeakFaultAccess() {
		return pLeakFault;
	}
	
	public ParserRule getLeakFaultRule() {
		return getLeakFaultAccess().getRule();
	}
	
	//BigPacketFault:
	//    'bigPacketFault' '(' originalData = INT ',' timesLarger = INT ')'
	//;
	public BigPacketFaultElements getBigPacketFaultAccess() {
		return pBigPacketFault;
	}
	
	public ParserRule getBigPacketFaultRule() {
		return getBigPacketFaultAccess().getRule();
	}
	
	//Exit:
	//    'exit' '(' type=INT ')'
	//;
	public ExitElements getExitAccess() {
		return pExit;
	}
	
	public ParserRule getExitRule() {
		return getExitAccess().getRule();
	}
	
	//Sleep:
	//    'sleep' '(' time=INT ')'
	//;
	public SleepElements getSleepAccess() {
		return pSleep;
	}
	
	public ParserRule getSleepRule() {
		return getSleepAccess().getRule();
	}
	
	//CPULoader:
	//    'cpuLoader' '(' amount=INT ')'
	//;
	public CPULoaderElements getCPULoaderAccess() {
		return pCPULoader;
	}
	
	public ParserRule getCPULoaderRule() {
		return getCPULoaderAccess().getRule();
	}
	
	//CodeBlock:
	//    ('BlockID' '(' name=ID ')') | ('CodeBlock' (name=ID)? '{' ('imports' '{' imports=CODE_BOX '}' ',' 'code' '{')? code=CODE_BOX '}')
	//;
	public CodeBlockElements getCodeBlockAccess() {
		return pCodeBlock;
	}
	
	public ParserRule getCodeBlockRule() {
		return getCodeBlockAccess().getRule();
	}
	
	//FaultCond:
	//    ('FaultCond' name=ID) | ('FaultCond' (name=ID)? '{' where=Where ';' ('whenToIncrement{' when=When '}')? (extraData=CodeBlock)? '}')
	//;
	public FaultCondElements getFaultCondAccess() {
		return pFaultCond;
	}
	
	public ParserRule getFaultCondRule() {
		return getFaultCondAccess().getRule();
	}
	
	//When:
	//     ( betweenRounds = betweenRounds | betweenSeconds = betweenSeconds | random = Random | randomBetweenRound = randomBetweenRound | 'ifCondition' '(' ifCondition=Condition ')' | faultCond=FaultCond | 'syncpoint' '=' syncpoint=ID)
	//;
	public WhenElements getWhenAccess() {
		return pWhen;
	}
	
	public ParserRule getWhenRule() {
		return getWhenAccess().getRule();
	}
	
	//Random:
	//    'random' '(' chance = INT ')'
	//;
	public RandomElements getRandomAccess() {
		return pRandom;
	}
	
	public ParserRule getRandomRule() {
		return getRandomAccess().getRule();
	}
	
	//betweenSeconds:
	//    'betweenSeconds' '(' start = INT ',' end = INT ')'
	//;
	public BetweenSecondsElements getBetweenSecondsAccess() {
		return pBetweenSeconds;
	}
	
	public ParserRule getBetweenSecondsRule() {
		return getBetweenSecondsAccess().getRule();
	}
	
	//betweenRounds:
	//    'betweenRound' '(' start = INT ',' end = INT ',' interval = INT (',' condition=Condition)? (',' random = Random)?')'
	//;
	public BetweenRoundsElements getBetweenRoundsAccess() {
		return pBetweenRounds;
	}
	
	public ParserRule getBetweenRoundsRule() {
		return getBetweenRoundsAccess().getRule();
	}
	
	//randomBetweenRound:
	//    'randomBetweenRound' '(' start = INT ',' end = INT ',' interval = INT ',' chance = INT ')'
	//;
	public RandomBetweenRoundElements getRandomBetweenRoundAccess() {
		return pRandomBetweenRound;
	}
	
	public ParserRule getRandomBetweenRoundRule() {
		return getRandomBetweenRoundAccess().getRule();
	}
	
	//Condition:
	//    ('CondID' '(' name=ID ')') | ('Condition' (name=ID)? '{' ('imports' '{' imports=CODE_BOX '}' ',' 'code' '{')? code=CODE_BOX '}')
	//;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Where:
	//    'whereToExecute' '{'(joinType=JOIN_TYPE ';')? name=STRING '}'
	//;
	public WhereElements getWhereAccess() {
		return pWhere;
	}
	
	public ParserRule getWhereRule() {
		return getWhereAccess().getRule();
	}
	
	//enum JOIN_TYPE:
	//    BEFORE='Before' | AFTER='After'
	//;
	public JOIN_TYPEElements getJOIN_TYPEAccess() {
		return eJOIN_TYPE;
	}
	
	public EnumRule getJOIN_TYPERule() {
		return getJOIN_TYPEAccess().getRule();
	}
	
	//terminal CODE_BOX:
	//    '///' -> '///'
	//;
	public TerminalRule getCODE_BOXRule() {
		return tCODE_BOX;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
