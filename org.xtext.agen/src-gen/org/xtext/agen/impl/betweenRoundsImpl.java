/**
 * generated by Xtext 2.25.0
 */
package org.xtext.agen.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.agen.AgenPackage;
import org.xtext.agen.Condition;
import org.xtext.agen.Random;
import org.xtext.agen.betweenRounds;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>between Rounds</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.agen.impl.betweenRoundsImpl#getStart <em>Start</em>}</li>
 *   <li>{@link org.xtext.agen.impl.betweenRoundsImpl#getEnd <em>End</em>}</li>
 *   <li>{@link org.xtext.agen.impl.betweenRoundsImpl#getInterval <em>Interval</em>}</li>
 *   <li>{@link org.xtext.agen.impl.betweenRoundsImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link org.xtext.agen.impl.betweenRoundsImpl#getRandom <em>Random</em>}</li>
 * </ul>
 *
 * @generated
 */
public class betweenRoundsImpl extends MinimalEObjectImpl.Container implements betweenRounds
{
  /**
   * The default value of the '{@link #getStart() <em>Start</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStart()
   * @generated
   * @ordered
   */
  protected static final int START_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getStart() <em>Start</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStart()
   * @generated
   * @ordered
   */
  protected int start = START_EDEFAULT;

  /**
   * The default value of the '{@link #getEnd() <em>End</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnd()
   * @generated
   * @ordered
   */
  protected static final int END_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getEnd() <em>End</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnd()
   * @generated
   * @ordered
   */
  protected int end = END_EDEFAULT;

  /**
   * The default value of the '{@link #getInterval() <em>Interval</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInterval()
   * @generated
   * @ordered
   */
  protected static final int INTERVAL_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getInterval() <em>Interval</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInterval()
   * @generated
   * @ordered
   */
  protected int interval = INTERVAL_EDEFAULT;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected Condition condition;

  /**
   * The cached value of the '{@link #getRandom() <em>Random</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRandom()
   * @generated
   * @ordered
   */
  protected Random random;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected betweenRoundsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AgenPackage.Literals.BETWEEN_ROUNDS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getStart()
  {
    return start;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStart(int newStart)
  {
    int oldStart = start;
    start = newStart;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.BETWEEN_ROUNDS__START, oldStart, start));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getEnd()
  {
    return end;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEnd(int newEnd)
  {
    int oldEnd = end;
    end = newEnd;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.BETWEEN_ROUNDS__END, oldEnd, end));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getInterval()
  {
    return interval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInterval(int newInterval)
  {
    int oldInterval = interval;
    interval = newInterval;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.BETWEEN_ROUNDS__INTERVAL, oldInterval, interval));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(Condition newCondition, NotificationChain msgs)
  {
    Condition oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AgenPackage.BETWEEN_ROUNDS__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCondition(Condition newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AgenPackage.BETWEEN_ROUNDS__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AgenPackage.BETWEEN_ROUNDS__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.BETWEEN_ROUNDS__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Random getRandom()
  {
    return random;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRandom(Random newRandom, NotificationChain msgs)
  {
    Random oldRandom = random;
    random = newRandom;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AgenPackage.BETWEEN_ROUNDS__RANDOM, oldRandom, newRandom);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRandom(Random newRandom)
  {
    if (newRandom != random)
    {
      NotificationChain msgs = null;
      if (random != null)
        msgs = ((InternalEObject)random).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AgenPackage.BETWEEN_ROUNDS__RANDOM, null, msgs);
      if (newRandom != null)
        msgs = ((InternalEObject)newRandom).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AgenPackage.BETWEEN_ROUNDS__RANDOM, null, msgs);
      msgs = basicSetRandom(newRandom, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.BETWEEN_ROUNDS__RANDOM, newRandom, newRandom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AgenPackage.BETWEEN_ROUNDS__CONDITION:
        return basicSetCondition(null, msgs);
      case AgenPackage.BETWEEN_ROUNDS__RANDOM:
        return basicSetRandom(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AgenPackage.BETWEEN_ROUNDS__START:
        return getStart();
      case AgenPackage.BETWEEN_ROUNDS__END:
        return getEnd();
      case AgenPackage.BETWEEN_ROUNDS__INTERVAL:
        return getInterval();
      case AgenPackage.BETWEEN_ROUNDS__CONDITION:
        return getCondition();
      case AgenPackage.BETWEEN_ROUNDS__RANDOM:
        return getRandom();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AgenPackage.BETWEEN_ROUNDS__START:
        setStart((Integer)newValue);
        return;
      case AgenPackage.BETWEEN_ROUNDS__END:
        setEnd((Integer)newValue);
        return;
      case AgenPackage.BETWEEN_ROUNDS__INTERVAL:
        setInterval((Integer)newValue);
        return;
      case AgenPackage.BETWEEN_ROUNDS__CONDITION:
        setCondition((Condition)newValue);
        return;
      case AgenPackage.BETWEEN_ROUNDS__RANDOM:
        setRandom((Random)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AgenPackage.BETWEEN_ROUNDS__START:
        setStart(START_EDEFAULT);
        return;
      case AgenPackage.BETWEEN_ROUNDS__END:
        setEnd(END_EDEFAULT);
        return;
      case AgenPackage.BETWEEN_ROUNDS__INTERVAL:
        setInterval(INTERVAL_EDEFAULT);
        return;
      case AgenPackage.BETWEEN_ROUNDS__CONDITION:
        setCondition((Condition)null);
        return;
      case AgenPackage.BETWEEN_ROUNDS__RANDOM:
        setRandom((Random)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AgenPackage.BETWEEN_ROUNDS__START:
        return start != START_EDEFAULT;
      case AgenPackage.BETWEEN_ROUNDS__END:
        return end != END_EDEFAULT;
      case AgenPackage.BETWEEN_ROUNDS__INTERVAL:
        return interval != INTERVAL_EDEFAULT;
      case AgenPackage.BETWEEN_ROUNDS__CONDITION:
        return condition != null;
      case AgenPackage.BETWEEN_ROUNDS__RANDOM:
        return random != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (start: ");
    result.append(start);
    result.append(", end: ");
    result.append(end);
    result.append(", interval: ");
    result.append(interval);
    result.append(')');
    return result.toString();
  }

} //betweenRoundsImpl
