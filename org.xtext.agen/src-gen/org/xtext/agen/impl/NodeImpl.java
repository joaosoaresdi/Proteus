/**
 * generated by Xtext 2.25.0
 */
package org.xtext.agen.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.xtext.agen.AgenPackage;
import org.xtext.agen.Node;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Node</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.agen.impl.NodeImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.agen.impl.NodeImpl#getFirstAttachPoint <em>First Attach Point</em>}</li>
 *   <li>{@link org.xtext.agen.impl.NodeImpl#getNodeLocation <em>Node Location</em>}</li>
 *   <li>{@link org.xtext.agen.impl.NodeImpl#getLogLocations <em>Log Locations</em>}</li>
 *   <li>{@link org.xtext.agen.impl.NodeImpl#getFaultIDs <em>Fault IDs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NodeImpl extends MinimalEObjectImpl.Container implements Node
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getFirstAttachPoint() <em>First Attach Point</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFirstAttachPoint()
   * @generated
   * @ordered
   */
  protected static final String FIRST_ATTACH_POINT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFirstAttachPoint() <em>First Attach Point</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFirstAttachPoint()
   * @generated
   * @ordered
   */
  protected String firstAttachPoint = FIRST_ATTACH_POINT_EDEFAULT;

  /**
   * The default value of the '{@link #getNodeLocation() <em>Node Location</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeLocation()
   * @generated
   * @ordered
   */
  protected static final String NODE_LOCATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNodeLocation() <em>Node Location</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeLocation()
   * @generated
   * @ordered
   */
  protected String nodeLocation = NODE_LOCATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getLogLocations() <em>Log Locations</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLogLocations()
   * @generated
   * @ordered
   */
  protected EList<String> logLocations;

  /**
   * The cached value of the '{@link #getFaultIDs() <em>Fault IDs</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFaultIDs()
   * @generated
   * @ordered
   */
  protected EList<String> faultIDs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NodeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AgenPackage.Literals.NODE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.NODE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFirstAttachPoint()
  {
    return firstAttachPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFirstAttachPoint(String newFirstAttachPoint)
  {
    String oldFirstAttachPoint = firstAttachPoint;
    firstAttachPoint = newFirstAttachPoint;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.NODE__FIRST_ATTACH_POINT, oldFirstAttachPoint, firstAttachPoint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNodeLocation()
  {
    return nodeLocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNodeLocation(String newNodeLocation)
  {
    String oldNodeLocation = nodeLocation;
    nodeLocation = newNodeLocation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.NODE__NODE_LOCATION, oldNodeLocation, nodeLocation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getLogLocations()
  {
    if (logLocations == null)
    {
      logLocations = new EDataTypeEList<String>(String.class, this, AgenPackage.NODE__LOG_LOCATIONS);
    }
    return logLocations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getFaultIDs()
  {
    if (faultIDs == null)
    {
      faultIDs = new EDataTypeEList<String>(String.class, this, AgenPackage.NODE__FAULT_IDS);
    }
    return faultIDs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AgenPackage.NODE__NAME:
        return getName();
      case AgenPackage.NODE__FIRST_ATTACH_POINT:
        return getFirstAttachPoint();
      case AgenPackage.NODE__NODE_LOCATION:
        return getNodeLocation();
      case AgenPackage.NODE__LOG_LOCATIONS:
        return getLogLocations();
      case AgenPackage.NODE__FAULT_IDS:
        return getFaultIDs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AgenPackage.NODE__NAME:
        setName((String)newValue);
        return;
      case AgenPackage.NODE__FIRST_ATTACH_POINT:
        setFirstAttachPoint((String)newValue);
        return;
      case AgenPackage.NODE__NODE_LOCATION:
        setNodeLocation((String)newValue);
        return;
      case AgenPackage.NODE__LOG_LOCATIONS:
        getLogLocations().clear();
        getLogLocations().addAll((Collection<? extends String>)newValue);
        return;
      case AgenPackage.NODE__FAULT_IDS:
        getFaultIDs().clear();
        getFaultIDs().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AgenPackage.NODE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AgenPackage.NODE__FIRST_ATTACH_POINT:
        setFirstAttachPoint(FIRST_ATTACH_POINT_EDEFAULT);
        return;
      case AgenPackage.NODE__NODE_LOCATION:
        setNodeLocation(NODE_LOCATION_EDEFAULT);
        return;
      case AgenPackage.NODE__LOG_LOCATIONS:
        getLogLocations().clear();
        return;
      case AgenPackage.NODE__FAULT_IDS:
        getFaultIDs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AgenPackage.NODE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AgenPackage.NODE__FIRST_ATTACH_POINT:
        return FIRST_ATTACH_POINT_EDEFAULT == null ? firstAttachPoint != null : !FIRST_ATTACH_POINT_EDEFAULT.equals(firstAttachPoint);
      case AgenPackage.NODE__NODE_LOCATION:
        return NODE_LOCATION_EDEFAULT == null ? nodeLocation != null : !NODE_LOCATION_EDEFAULT.equals(nodeLocation);
      case AgenPackage.NODE__LOG_LOCATIONS:
        return logLocations != null && !logLocations.isEmpty();
      case AgenPackage.NODE__FAULT_IDS:
        return faultIDs != null && !faultIDs.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", firstAttachPoint: ");
    result.append(firstAttachPoint);
    result.append(", nodeLocation: ");
    result.append(nodeLocation);
    result.append(", logLocations: ");
    result.append(logLocations);
    result.append(", faultIDs: ");
    result.append(faultIDs);
    result.append(')');
    return result.toString();
  }

} //NodeImpl
