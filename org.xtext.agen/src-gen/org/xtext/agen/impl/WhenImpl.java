/**
 * generated by Xtext 2.25.0
 */
package org.xtext.agen.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.agen.AgenPackage;
import org.xtext.agen.Condition;
import org.xtext.agen.FaultCond;
import org.xtext.agen.Random;
import org.xtext.agen.When;
import org.xtext.agen.betweenRounds;
import org.xtext.agen.betweenSeconds;
import org.xtext.agen.randomBetweenRound;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>When</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.agen.impl.WhenImpl#getBetweenRounds <em>Between Rounds</em>}</li>
 *   <li>{@link org.xtext.agen.impl.WhenImpl#getBetweenSeconds <em>Between Seconds</em>}</li>
 *   <li>{@link org.xtext.agen.impl.WhenImpl#getRandom <em>Random</em>}</li>
 *   <li>{@link org.xtext.agen.impl.WhenImpl#getRandomBetweenRound <em>Random Between Round</em>}</li>
 *   <li>{@link org.xtext.agen.impl.WhenImpl#getIfCondition <em>If Condition</em>}</li>
 *   <li>{@link org.xtext.agen.impl.WhenImpl#getFaultCond <em>Fault Cond</em>}</li>
 *   <li>{@link org.xtext.agen.impl.WhenImpl#getSyncpoint <em>Syncpoint</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WhenImpl extends MinimalEObjectImpl.Container implements When
{
  /**
   * The cached value of the '{@link #getBetweenRounds() <em>Between Rounds</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBetweenRounds()
   * @generated
   * @ordered
   */
  protected betweenRounds betweenRounds;

  /**
   * The cached value of the '{@link #getBetweenSeconds() <em>Between Seconds</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBetweenSeconds()
   * @generated
   * @ordered
   */
  protected betweenSeconds betweenSeconds;

  /**
   * The cached value of the '{@link #getRandom() <em>Random</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRandom()
   * @generated
   * @ordered
   */
  protected Random random;

  /**
   * The cached value of the '{@link #getRandomBetweenRound() <em>Random Between Round</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRandomBetweenRound()
   * @generated
   * @ordered
   */
  protected randomBetweenRound randomBetweenRound;

  /**
   * The cached value of the '{@link #getIfCondition() <em>If Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIfCondition()
   * @generated
   * @ordered
   */
  protected Condition ifCondition;

  /**
   * The cached value of the '{@link #getFaultCond() <em>Fault Cond</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFaultCond()
   * @generated
   * @ordered
   */
  protected FaultCond faultCond;

  /**
   * The default value of the '{@link #getSyncpoint() <em>Syncpoint</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSyncpoint()
   * @generated
   * @ordered
   */
  protected static final String SYNCPOINT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSyncpoint() <em>Syncpoint</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSyncpoint()
   * @generated
   * @ordered
   */
  protected String syncpoint = SYNCPOINT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WhenImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AgenPackage.Literals.WHEN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public betweenRounds getBetweenRounds()
  {
    return betweenRounds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBetweenRounds(betweenRounds newBetweenRounds, NotificationChain msgs)
  {
    betweenRounds oldBetweenRounds = betweenRounds;
    betweenRounds = newBetweenRounds;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AgenPackage.WHEN__BETWEEN_ROUNDS, oldBetweenRounds, newBetweenRounds);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBetweenRounds(betweenRounds newBetweenRounds)
  {
    if (newBetweenRounds != betweenRounds)
    {
      NotificationChain msgs = null;
      if (betweenRounds != null)
        msgs = ((InternalEObject)betweenRounds).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AgenPackage.WHEN__BETWEEN_ROUNDS, null, msgs);
      if (newBetweenRounds != null)
        msgs = ((InternalEObject)newBetweenRounds).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AgenPackage.WHEN__BETWEEN_ROUNDS, null, msgs);
      msgs = basicSetBetweenRounds(newBetweenRounds, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.WHEN__BETWEEN_ROUNDS, newBetweenRounds, newBetweenRounds));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public betweenSeconds getBetweenSeconds()
  {
    return betweenSeconds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBetweenSeconds(betweenSeconds newBetweenSeconds, NotificationChain msgs)
  {
    betweenSeconds oldBetweenSeconds = betweenSeconds;
    betweenSeconds = newBetweenSeconds;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AgenPackage.WHEN__BETWEEN_SECONDS, oldBetweenSeconds, newBetweenSeconds);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBetweenSeconds(betweenSeconds newBetweenSeconds)
  {
    if (newBetweenSeconds != betweenSeconds)
    {
      NotificationChain msgs = null;
      if (betweenSeconds != null)
        msgs = ((InternalEObject)betweenSeconds).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AgenPackage.WHEN__BETWEEN_SECONDS, null, msgs);
      if (newBetweenSeconds != null)
        msgs = ((InternalEObject)newBetweenSeconds).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AgenPackage.WHEN__BETWEEN_SECONDS, null, msgs);
      msgs = basicSetBetweenSeconds(newBetweenSeconds, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.WHEN__BETWEEN_SECONDS, newBetweenSeconds, newBetweenSeconds));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Random getRandom()
  {
    return random;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRandom(Random newRandom, NotificationChain msgs)
  {
    Random oldRandom = random;
    random = newRandom;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AgenPackage.WHEN__RANDOM, oldRandom, newRandom);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRandom(Random newRandom)
  {
    if (newRandom != random)
    {
      NotificationChain msgs = null;
      if (random != null)
        msgs = ((InternalEObject)random).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AgenPackage.WHEN__RANDOM, null, msgs);
      if (newRandom != null)
        msgs = ((InternalEObject)newRandom).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AgenPackage.WHEN__RANDOM, null, msgs);
      msgs = basicSetRandom(newRandom, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.WHEN__RANDOM, newRandom, newRandom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public randomBetweenRound getRandomBetweenRound()
  {
    return randomBetweenRound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRandomBetweenRound(randomBetweenRound newRandomBetweenRound, NotificationChain msgs)
  {
    randomBetweenRound oldRandomBetweenRound = randomBetweenRound;
    randomBetweenRound = newRandomBetweenRound;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AgenPackage.WHEN__RANDOM_BETWEEN_ROUND, oldRandomBetweenRound, newRandomBetweenRound);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRandomBetweenRound(randomBetweenRound newRandomBetweenRound)
  {
    if (newRandomBetweenRound != randomBetweenRound)
    {
      NotificationChain msgs = null;
      if (randomBetweenRound != null)
        msgs = ((InternalEObject)randomBetweenRound).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AgenPackage.WHEN__RANDOM_BETWEEN_ROUND, null, msgs);
      if (newRandomBetweenRound != null)
        msgs = ((InternalEObject)newRandomBetweenRound).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AgenPackage.WHEN__RANDOM_BETWEEN_ROUND, null, msgs);
      msgs = basicSetRandomBetweenRound(newRandomBetweenRound, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.WHEN__RANDOM_BETWEEN_ROUND, newRandomBetweenRound, newRandomBetweenRound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getIfCondition()
  {
    return ifCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIfCondition(Condition newIfCondition, NotificationChain msgs)
  {
    Condition oldIfCondition = ifCondition;
    ifCondition = newIfCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AgenPackage.WHEN__IF_CONDITION, oldIfCondition, newIfCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIfCondition(Condition newIfCondition)
  {
    if (newIfCondition != ifCondition)
    {
      NotificationChain msgs = null;
      if (ifCondition != null)
        msgs = ((InternalEObject)ifCondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AgenPackage.WHEN__IF_CONDITION, null, msgs);
      if (newIfCondition != null)
        msgs = ((InternalEObject)newIfCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AgenPackage.WHEN__IF_CONDITION, null, msgs);
      msgs = basicSetIfCondition(newIfCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.WHEN__IF_CONDITION, newIfCondition, newIfCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FaultCond getFaultCond()
  {
    return faultCond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFaultCond(FaultCond newFaultCond, NotificationChain msgs)
  {
    FaultCond oldFaultCond = faultCond;
    faultCond = newFaultCond;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AgenPackage.WHEN__FAULT_COND, oldFaultCond, newFaultCond);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFaultCond(FaultCond newFaultCond)
  {
    if (newFaultCond != faultCond)
    {
      NotificationChain msgs = null;
      if (faultCond != null)
        msgs = ((InternalEObject)faultCond).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AgenPackage.WHEN__FAULT_COND, null, msgs);
      if (newFaultCond != null)
        msgs = ((InternalEObject)newFaultCond).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AgenPackage.WHEN__FAULT_COND, null, msgs);
      msgs = basicSetFaultCond(newFaultCond, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.WHEN__FAULT_COND, newFaultCond, newFaultCond));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSyncpoint()
  {
    return syncpoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSyncpoint(String newSyncpoint)
  {
    String oldSyncpoint = syncpoint;
    syncpoint = newSyncpoint;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.WHEN__SYNCPOINT, oldSyncpoint, syncpoint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AgenPackage.WHEN__BETWEEN_ROUNDS:
        return basicSetBetweenRounds(null, msgs);
      case AgenPackage.WHEN__BETWEEN_SECONDS:
        return basicSetBetweenSeconds(null, msgs);
      case AgenPackage.WHEN__RANDOM:
        return basicSetRandom(null, msgs);
      case AgenPackage.WHEN__RANDOM_BETWEEN_ROUND:
        return basicSetRandomBetweenRound(null, msgs);
      case AgenPackage.WHEN__IF_CONDITION:
        return basicSetIfCondition(null, msgs);
      case AgenPackage.WHEN__FAULT_COND:
        return basicSetFaultCond(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AgenPackage.WHEN__BETWEEN_ROUNDS:
        return getBetweenRounds();
      case AgenPackage.WHEN__BETWEEN_SECONDS:
        return getBetweenSeconds();
      case AgenPackage.WHEN__RANDOM:
        return getRandom();
      case AgenPackage.WHEN__RANDOM_BETWEEN_ROUND:
        return getRandomBetweenRound();
      case AgenPackage.WHEN__IF_CONDITION:
        return getIfCondition();
      case AgenPackage.WHEN__FAULT_COND:
        return getFaultCond();
      case AgenPackage.WHEN__SYNCPOINT:
        return getSyncpoint();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AgenPackage.WHEN__BETWEEN_ROUNDS:
        setBetweenRounds((betweenRounds)newValue);
        return;
      case AgenPackage.WHEN__BETWEEN_SECONDS:
        setBetweenSeconds((betweenSeconds)newValue);
        return;
      case AgenPackage.WHEN__RANDOM:
        setRandom((Random)newValue);
        return;
      case AgenPackage.WHEN__RANDOM_BETWEEN_ROUND:
        setRandomBetweenRound((randomBetweenRound)newValue);
        return;
      case AgenPackage.WHEN__IF_CONDITION:
        setIfCondition((Condition)newValue);
        return;
      case AgenPackage.WHEN__FAULT_COND:
        setFaultCond((FaultCond)newValue);
        return;
      case AgenPackage.WHEN__SYNCPOINT:
        setSyncpoint((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AgenPackage.WHEN__BETWEEN_ROUNDS:
        setBetweenRounds((betweenRounds)null);
        return;
      case AgenPackage.WHEN__BETWEEN_SECONDS:
        setBetweenSeconds((betweenSeconds)null);
        return;
      case AgenPackage.WHEN__RANDOM:
        setRandom((Random)null);
        return;
      case AgenPackage.WHEN__RANDOM_BETWEEN_ROUND:
        setRandomBetweenRound((randomBetweenRound)null);
        return;
      case AgenPackage.WHEN__IF_CONDITION:
        setIfCondition((Condition)null);
        return;
      case AgenPackage.WHEN__FAULT_COND:
        setFaultCond((FaultCond)null);
        return;
      case AgenPackage.WHEN__SYNCPOINT:
        setSyncpoint(SYNCPOINT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AgenPackage.WHEN__BETWEEN_ROUNDS:
        return betweenRounds != null;
      case AgenPackage.WHEN__BETWEEN_SECONDS:
        return betweenSeconds != null;
      case AgenPackage.WHEN__RANDOM:
        return random != null;
      case AgenPackage.WHEN__RANDOM_BETWEEN_ROUND:
        return randomBetweenRound != null;
      case AgenPackage.WHEN__IF_CONDITION:
        return ifCondition != null;
      case AgenPackage.WHEN__FAULT_COND:
        return faultCond != null;
      case AgenPackage.WHEN__SYNCPOINT:
        return SYNCPOINT_EDEFAULT == null ? syncpoint != null : !SYNCPOINT_EDEFAULT.equals(syncpoint);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (syncpoint: ");
    result.append(syncpoint);
    result.append(')');
    return result.toString();
  }

} //WhenImpl
