/**
 * generated by Xtext 2.25.0
 */
package org.xtext.agen.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.xtext.agen.AgenFactory;
import org.xtext.agen.AgenPackage;
import org.xtext.agen.AlterPacketFault;
import org.xtext.agen.AlterPacketFaultType;
import org.xtext.agen.BigPacketFault;
import org.xtext.agen.CPULoader;
import org.xtext.agen.CodeBlock;
import org.xtext.agen.Condition;
import org.xtext.agen.ExecParams;
import org.xtext.agen.Exit;
import org.xtext.agen.Fault;
import org.xtext.agen.FaultCond;
import org.xtext.agen.LeakFault;
import org.xtext.agen.Log;
import org.xtext.agen.Model;
import org.xtext.agen.Node;
import org.xtext.agen.Random;
import org.xtext.agen.RepeatExecution;
import org.xtext.agen.RunConfiguration;
import org.xtext.agen.Sleep;
import org.xtext.agen.Syncpoint;
import org.xtext.agen.Types;
import org.xtext.agen.What;
import org.xtext.agen.When;
import org.xtext.agen.Where;
import org.xtext.agen.betweenRounds;
import org.xtext.agen.betweenSeconds;
import org.xtext.agen.randomBetweenRound;
import org.xtext.agen.syncpointOnFail;
import org.xtext.agen.syncpointType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AgenPackageImpl extends EPackageImpl implements AgenPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typesEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass runConfigurationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nodeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass logEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass syncpointEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass faultEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass execParamsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass whatEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass repeatExecutionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass alterPacketFaultEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass leakFaultEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bigPacketFaultEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass exitEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sleepEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cpuLoaderEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass codeBlockEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass faultCondEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass whenEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass randomEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass betweenSecondsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass betweenRoundsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass randomBetweenRoundEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass whereEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum syncpointOnFailEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum syncpointTypeEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum alterPacketFaultTypeEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum joiN_TYPEEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.xtext.agen.AgenPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private AgenPackageImpl()
  {
    super(eNS_URI, AgenFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link AgenPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static AgenPackage init()
  {
    if (isInited) return (AgenPackage)EPackage.Registry.INSTANCE.getEPackage(AgenPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredAgenPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    AgenPackageImpl theAgenPackage = registeredAgenPackage instanceof AgenPackageImpl ? (AgenPackageImpl)registeredAgenPackage : new AgenPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theAgenPackage.createPackageContents();

    // Initialize created meta-data
    theAgenPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theAgenPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(AgenPackage.eNS_URI, theAgenPackage);
    return theAgenPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModel()
  {
    return modelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_Types()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTypes()
  {
    return typesEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRunConfiguration()
  {
    return runConfigurationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRunConfiguration_CoordinatorLocation()
  {
    return (EAttribute)runConfigurationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRunConfiguration_Nodes()
  {
    return (EReference)runConfigurationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNode()
  {
    return nodeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNode_Name()
  {
    return (EAttribute)nodeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNode_FirstAttachPoint()
  {
    return (EAttribute)nodeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNode_NodeLocation()
  {
    return (EAttribute)nodeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNode_LogLocations()
  {
    return (EAttribute)nodeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNode_FaultIDs()
  {
    return (EAttribute)nodeEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLog()
  {
    return logEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLog_Name()
  {
    return (EAttribute)logEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLog_FaultCond()
  {
    return (EAttribute)logEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLog_ExtraData()
  {
    return (EReference)logEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLog_StateBased()
  {
    return (EReference)logEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSyncpoint()
  {
    return syncpointEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSyncpoint_Name()
  {
    return (EAttribute)syncpointEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSyncpoint_NodesDependant()
  {
    return (EAttribute)syncpointEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSyncpoint_Type()
  {
    return (EAttribute)syncpointEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSyncpoint_OnFail()
  {
    return (EAttribute)syncpointEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSyncpoint_FaultCond()
  {
    return (EReference)syncpointEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFault()
  {
    return faultEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFault_Name()
  {
    return (EAttribute)faultEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFault_Pointcut()
  {
    return (EAttribute)faultEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFault_ExecParams()
  {
    return (EReference)faultEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExecParams()
  {
    return execParamsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getExecParams_Name()
  {
    return (EAttribute)execParamsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getExecParams_Where()
  {
    return (EAttribute)execParamsEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getExecParams_When()
  {
    return (EReference)execParamsEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getExecParams_What()
  {
    return (EReference)execParamsEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getWhat()
  {
    return whatEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWhat_CodeBlock()
  {
    return (EReference)whatEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWhat_Sleep()
  {
    return (EReference)whatEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWhat_Exit()
  {
    return (EReference)whatEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWhat_BigPacketFault()
  {
    return (EReference)whatEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWhat_LeakFault()
  {
    return (EReference)whatEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWhat_AlterPacketFault()
  {
    return (EReference)whatEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWhat_CpuLoader()
  {
    return (EReference)whatEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getWhat_SkipExecution()
  {
    return (EAttribute)whatEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWhat_RepeatExecution()
  {
    return (EReference)whatEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRepeatExecution()
  {
    return repeatExecutionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRepeatExecution_Times()
  {
    return (EAttribute)repeatExecutionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAlterPacketFault()
  {
    return alterPacketFaultEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAlterPacketFault_OriginalData()
  {
    return (EAttribute)alterPacketFaultEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAlterPacketFault_KindOfAlteration()
  {
    return (EAttribute)alterPacketFaultEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLeakFault()
  {
    return leakFaultEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLeakFault_NrofLeaks()
  {
    return (EAttribute)leakFaultEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBigPacketFault()
  {
    return bigPacketFaultEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBigPacketFault_OriginalData()
  {
    return (EAttribute)bigPacketFaultEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBigPacketFault_TimesLarger()
  {
    return (EAttribute)bigPacketFaultEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExit()
  {
    return exitEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getExit_Type()
  {
    return (EAttribute)exitEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSleep()
  {
    return sleepEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSleep_Time()
  {
    return (EAttribute)sleepEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCPULoader()
  {
    return cpuLoaderEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCPULoader_Amount()
  {
    return (EAttribute)cpuLoaderEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCodeBlock()
  {
    return codeBlockEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCodeBlock_Name()
  {
    return (EAttribute)codeBlockEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCodeBlock_Imports()
  {
    return (EAttribute)codeBlockEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCodeBlock_Code()
  {
    return (EAttribute)codeBlockEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFaultCond()
  {
    return faultCondEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFaultCond_Name()
  {
    return (EAttribute)faultCondEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFaultCond_Where()
  {
    return (EReference)faultCondEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFaultCond_When()
  {
    return (EReference)faultCondEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFaultCond_ExtraData()
  {
    return (EReference)faultCondEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getWhen()
  {
    return whenEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWhen_BetweenRounds()
  {
    return (EReference)whenEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWhen_BetweenSeconds()
  {
    return (EReference)whenEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWhen_Random()
  {
    return (EReference)whenEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWhen_RandomBetweenRound()
  {
    return (EReference)whenEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWhen_IfCondition()
  {
    return (EReference)whenEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getWhen_FaultCond()
  {
    return (EReference)whenEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getWhen_Syncpoint()
  {
    return (EAttribute)whenEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRandom()
  {
    return randomEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRandom_Chance()
  {
    return (EAttribute)randomEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getbetweenSeconds()
  {
    return betweenSecondsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getbetweenSeconds_Start()
  {
    return (EAttribute)betweenSecondsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getbetweenSeconds_End()
  {
    return (EAttribute)betweenSecondsEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getbetweenRounds()
  {
    return betweenRoundsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getbetweenRounds_Start()
  {
    return (EAttribute)betweenRoundsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getbetweenRounds_End()
  {
    return (EAttribute)betweenRoundsEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getbetweenRounds_Interval()
  {
    return (EAttribute)betweenRoundsEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getbetweenRounds_Condition()
  {
    return (EReference)betweenRoundsEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getbetweenRounds_Random()
  {
    return (EReference)betweenRoundsEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getrandomBetweenRound()
  {
    return randomBetweenRoundEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getrandomBetweenRound_Start()
  {
    return (EAttribute)randomBetweenRoundEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getrandomBetweenRound_End()
  {
    return (EAttribute)randomBetweenRoundEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getrandomBetweenRound_Interval()
  {
    return (EAttribute)randomBetweenRoundEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getrandomBetweenRound_Chance()
  {
    return (EAttribute)randomBetweenRoundEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCondition()
  {
    return conditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCondition_Name()
  {
    return (EAttribute)conditionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCondition_Imports()
  {
    return (EAttribute)conditionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCondition_Code()
  {
    return (EAttribute)conditionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getWhere()
  {
    return whereEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getWhere_JoinType()
  {
    return (EAttribute)whereEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getWhere_Name()
  {
    return (EAttribute)whereEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getsyncpointOnFail()
  {
    return syncpointOnFailEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getsyncpointType()
  {
    return syncpointTypeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getAlterPacketFaultType()
  {
    return alterPacketFaultTypeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getJOIN_TYPE()
  {
    return joiN_TYPEEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AgenFactory getAgenFactory()
  {
    return (AgenFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    modelEClass = createEClass(MODEL);
    createEReference(modelEClass, MODEL__TYPES);

    typesEClass = createEClass(TYPES);

    runConfigurationEClass = createEClass(RUN_CONFIGURATION);
    createEAttribute(runConfigurationEClass, RUN_CONFIGURATION__COORDINATOR_LOCATION);
    createEReference(runConfigurationEClass, RUN_CONFIGURATION__NODES);

    nodeEClass = createEClass(NODE);
    createEAttribute(nodeEClass, NODE__NAME);
    createEAttribute(nodeEClass, NODE__FIRST_ATTACH_POINT);
    createEAttribute(nodeEClass, NODE__NODE_LOCATION);
    createEAttribute(nodeEClass, NODE__LOG_LOCATIONS);
    createEAttribute(nodeEClass, NODE__FAULT_IDS);

    logEClass = createEClass(LOG);
    createEAttribute(logEClass, LOG__NAME);
    createEAttribute(logEClass, LOG__FAULT_COND);
    createEReference(logEClass, LOG__EXTRA_DATA);
    createEReference(logEClass, LOG__STATE_BASED);

    syncpointEClass = createEClass(SYNCPOINT);
    createEAttribute(syncpointEClass, SYNCPOINT__NAME);
    createEAttribute(syncpointEClass, SYNCPOINT__NODES_DEPENDANT);
    createEAttribute(syncpointEClass, SYNCPOINT__TYPE);
    createEAttribute(syncpointEClass, SYNCPOINT__ON_FAIL);
    createEReference(syncpointEClass, SYNCPOINT__FAULT_COND);

    faultEClass = createEClass(FAULT);
    createEAttribute(faultEClass, FAULT__NAME);
    createEAttribute(faultEClass, FAULT__POINTCUT);
    createEReference(faultEClass, FAULT__EXEC_PARAMS);

    execParamsEClass = createEClass(EXEC_PARAMS);
    createEAttribute(execParamsEClass, EXEC_PARAMS__NAME);
    createEAttribute(execParamsEClass, EXEC_PARAMS__WHERE);
    createEReference(execParamsEClass, EXEC_PARAMS__WHEN);
    createEReference(execParamsEClass, EXEC_PARAMS__WHAT);

    whatEClass = createEClass(WHAT);
    createEReference(whatEClass, WHAT__CODE_BLOCK);
    createEReference(whatEClass, WHAT__SLEEP);
    createEReference(whatEClass, WHAT__EXIT);
    createEReference(whatEClass, WHAT__BIG_PACKET_FAULT);
    createEReference(whatEClass, WHAT__LEAK_FAULT);
    createEReference(whatEClass, WHAT__ALTER_PACKET_FAULT);
    createEReference(whatEClass, WHAT__CPU_LOADER);
    createEAttribute(whatEClass, WHAT__SKIP_EXECUTION);
    createEReference(whatEClass, WHAT__REPEAT_EXECUTION);

    repeatExecutionEClass = createEClass(REPEAT_EXECUTION);
    createEAttribute(repeatExecutionEClass, REPEAT_EXECUTION__TIMES);

    alterPacketFaultEClass = createEClass(ALTER_PACKET_FAULT);
    createEAttribute(alterPacketFaultEClass, ALTER_PACKET_FAULT__ORIGINAL_DATA);
    createEAttribute(alterPacketFaultEClass, ALTER_PACKET_FAULT__KIND_OF_ALTERATION);

    leakFaultEClass = createEClass(LEAK_FAULT);
    createEAttribute(leakFaultEClass, LEAK_FAULT__NROF_LEAKS);

    bigPacketFaultEClass = createEClass(BIG_PACKET_FAULT);
    createEAttribute(bigPacketFaultEClass, BIG_PACKET_FAULT__ORIGINAL_DATA);
    createEAttribute(bigPacketFaultEClass, BIG_PACKET_FAULT__TIMES_LARGER);

    exitEClass = createEClass(EXIT);
    createEAttribute(exitEClass, EXIT__TYPE);

    sleepEClass = createEClass(SLEEP);
    createEAttribute(sleepEClass, SLEEP__TIME);

    cpuLoaderEClass = createEClass(CPU_LOADER);
    createEAttribute(cpuLoaderEClass, CPU_LOADER__AMOUNT);

    codeBlockEClass = createEClass(CODE_BLOCK);
    createEAttribute(codeBlockEClass, CODE_BLOCK__NAME);
    createEAttribute(codeBlockEClass, CODE_BLOCK__IMPORTS);
    createEAttribute(codeBlockEClass, CODE_BLOCK__CODE);

    faultCondEClass = createEClass(FAULT_COND);
    createEAttribute(faultCondEClass, FAULT_COND__NAME);
    createEReference(faultCondEClass, FAULT_COND__WHERE);
    createEReference(faultCondEClass, FAULT_COND__WHEN);
    createEReference(faultCondEClass, FAULT_COND__EXTRA_DATA);

    whenEClass = createEClass(WHEN);
    createEReference(whenEClass, WHEN__BETWEEN_ROUNDS);
    createEReference(whenEClass, WHEN__BETWEEN_SECONDS);
    createEReference(whenEClass, WHEN__RANDOM);
    createEReference(whenEClass, WHEN__RANDOM_BETWEEN_ROUND);
    createEReference(whenEClass, WHEN__IF_CONDITION);
    createEReference(whenEClass, WHEN__FAULT_COND);
    createEAttribute(whenEClass, WHEN__SYNCPOINT);

    randomEClass = createEClass(RANDOM);
    createEAttribute(randomEClass, RANDOM__CHANCE);

    betweenSecondsEClass = createEClass(BETWEEN_SECONDS);
    createEAttribute(betweenSecondsEClass, BETWEEN_SECONDS__START);
    createEAttribute(betweenSecondsEClass, BETWEEN_SECONDS__END);

    betweenRoundsEClass = createEClass(BETWEEN_ROUNDS);
    createEAttribute(betweenRoundsEClass, BETWEEN_ROUNDS__START);
    createEAttribute(betweenRoundsEClass, BETWEEN_ROUNDS__END);
    createEAttribute(betweenRoundsEClass, BETWEEN_ROUNDS__INTERVAL);
    createEReference(betweenRoundsEClass, BETWEEN_ROUNDS__CONDITION);
    createEReference(betweenRoundsEClass, BETWEEN_ROUNDS__RANDOM);

    randomBetweenRoundEClass = createEClass(RANDOM_BETWEEN_ROUND);
    createEAttribute(randomBetweenRoundEClass, RANDOM_BETWEEN_ROUND__START);
    createEAttribute(randomBetweenRoundEClass, RANDOM_BETWEEN_ROUND__END);
    createEAttribute(randomBetweenRoundEClass, RANDOM_BETWEEN_ROUND__INTERVAL);
    createEAttribute(randomBetweenRoundEClass, RANDOM_BETWEEN_ROUND__CHANCE);

    conditionEClass = createEClass(CONDITION);
    createEAttribute(conditionEClass, CONDITION__NAME);
    createEAttribute(conditionEClass, CONDITION__IMPORTS);
    createEAttribute(conditionEClass, CONDITION__CODE);

    whereEClass = createEClass(WHERE);
    createEAttribute(whereEClass, WHERE__JOIN_TYPE);
    createEAttribute(whereEClass, WHERE__NAME);

    // Create enums
    syncpointOnFailEEnum = createEEnum(SYNCPOINT_ON_FAIL);
    syncpointTypeEEnum = createEEnum(SYNCPOINT_TYPE);
    alterPacketFaultTypeEEnum = createEEnum(ALTER_PACKET_FAULT_TYPE);
    joiN_TYPEEEnum = createEEnum(JOIN_TYPE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    runConfigurationEClass.getESuperTypes().add(this.getTypes());
    logEClass.getESuperTypes().add(this.getTypes());
    syncpointEClass.getESuperTypes().add(this.getTypes());
    faultEClass.getESuperTypes().add(this.getTypes());
    codeBlockEClass.getESuperTypes().add(this.getTypes());
    faultCondEClass.getESuperTypes().add(this.getTypes());
    conditionEClass.getESuperTypes().add(this.getTypes());
    whereEClass.getESuperTypes().add(this.getTypes());

    // Initialize classes and features; add operations and parameters
    initEClass(modelEClass, Model.class, "Model", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getModel_Types(), this.getTypes(), null, "types", null, 0, -1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(typesEClass, Types.class, "Types", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(runConfigurationEClass, RunConfiguration.class, "RunConfiguration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRunConfiguration_CoordinatorLocation(), ecorePackage.getEString(), "CoordinatorLocation", null, 0, 1, RunConfiguration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRunConfiguration_Nodes(), this.getNode(), null, "nodes", null, 0, -1, RunConfiguration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(nodeEClass, Node.class, "Node", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNode_Name(), ecorePackage.getEString(), "name", null, 0, 1, Node.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getNode_FirstAttachPoint(), ecorePackage.getEString(), "firstAttachPoint", null, 0, 1, Node.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getNode_NodeLocation(), ecorePackage.getEString(), "nodeLocation", null, 0, 1, Node.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getNode_LogLocations(), ecorePackage.getEString(), "logLocations", null, 0, -1, Node.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getNode_FaultIDs(), ecorePackage.getEString(), "faultIDs", null, 0, -1, Node.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(logEClass, Log.class, "Log", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLog_Name(), ecorePackage.getEString(), "name", null, 0, 1, Log.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLog_FaultCond(), ecorePackage.getEString(), "faultCond", null, 0, 1, Log.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLog_ExtraData(), this.getCodeBlock(), null, "extraData", null, 0, 1, Log.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLog_StateBased(), this.getCodeBlock(), null, "stateBased", null, 0, 1, Log.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(syncpointEClass, Syncpoint.class, "Syncpoint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSyncpoint_Name(), ecorePackage.getEString(), "name", null, 0, 1, Syncpoint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSyncpoint_NodesDependant(), ecorePackage.getEString(), "nodesDependant", null, 0, -1, Syncpoint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSyncpoint_Type(), this.getsyncpointType(), "type", null, 0, 1, Syncpoint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSyncpoint_OnFail(), this.getsyncpointOnFail(), "onFail", null, 0, 1, Syncpoint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSyncpoint_FaultCond(), this.getFaultCond(), null, "faultCond", null, 0, 1, Syncpoint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(faultEClass, Fault.class, "Fault", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFault_Name(), ecorePackage.getEString(), "name", null, 0, 1, Fault.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFault_Pointcut(), ecorePackage.getEString(), "pointcut", null, 0, 1, Fault.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFault_ExecParams(), this.getExecParams(), null, "execParams", null, 0, -1, Fault.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(execParamsEClass, ExecParams.class, "ExecParams", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getExecParams_Name(), ecorePackage.getEString(), "name", null, 0, 1, ExecParams.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getExecParams_Where(), this.getJOIN_TYPE(), "where", null, 0, 1, ExecParams.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExecParams_When(), this.getWhen(), null, "when", null, 0, 1, ExecParams.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExecParams_What(), this.getWhat(), null, "what", null, 0, 1, ExecParams.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(whatEClass, What.class, "What", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getWhat_CodeBlock(), this.getCodeBlock(), null, "codeBlock", null, 0, 1, What.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getWhat_Sleep(), this.getSleep(), null, "sleep", null, 0, 1, What.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getWhat_Exit(), this.getExit(), null, "exit", null, 0, 1, What.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getWhat_BigPacketFault(), this.getBigPacketFault(), null, "bigPacketFault", null, 0, 1, What.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getWhat_LeakFault(), this.getLeakFault(), null, "leakFault", null, 0, 1, What.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getWhat_AlterPacketFault(), this.getAlterPacketFault(), null, "alterPacketFault", null, 0, 1, What.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getWhat_CpuLoader(), this.getCPULoader(), null, "cpuLoader", null, 0, 1, What.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getWhat_SkipExecution(), ecorePackage.getEString(), "skipExecution", null, 0, 1, What.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getWhat_RepeatExecution(), this.getRepeatExecution(), null, "repeatExecution", null, 0, 1, What.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(repeatExecutionEClass, RepeatExecution.class, "RepeatExecution", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRepeatExecution_Times(), ecorePackage.getEInt(), "times", null, 0, 1, RepeatExecution.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(alterPacketFaultEClass, AlterPacketFault.class, "AlterPacketFault", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAlterPacketFault_OriginalData(), ecorePackage.getEInt(), "originalData", null, 0, 1, AlterPacketFault.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAlterPacketFault_KindOfAlteration(), this.getAlterPacketFaultType(), "kindOfAlteration", null, 0, 1, AlterPacketFault.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(leakFaultEClass, LeakFault.class, "LeakFault", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLeakFault_NrofLeaks(), ecorePackage.getEInt(), "nrofLeaks", null, 0, 1, LeakFault.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(bigPacketFaultEClass, BigPacketFault.class, "BigPacketFault", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBigPacketFault_OriginalData(), ecorePackage.getEInt(), "originalData", null, 0, 1, BigPacketFault.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBigPacketFault_TimesLarger(), ecorePackage.getEInt(), "timesLarger", null, 0, 1, BigPacketFault.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(exitEClass, Exit.class, "Exit", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getExit_Type(), ecorePackage.getEInt(), "type", null, 0, 1, Exit.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(sleepEClass, Sleep.class, "Sleep", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSleep_Time(), ecorePackage.getEInt(), "time", null, 0, 1, Sleep.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cpuLoaderEClass, CPULoader.class, "CPULoader", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCPULoader_Amount(), ecorePackage.getEInt(), "amount", null, 0, 1, CPULoader.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(codeBlockEClass, CodeBlock.class, "CodeBlock", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCodeBlock_Name(), ecorePackage.getEString(), "name", null, 0, 1, CodeBlock.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCodeBlock_Imports(), ecorePackage.getEString(), "imports", null, 0, 1, CodeBlock.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCodeBlock_Code(), ecorePackage.getEString(), "code", null, 0, 1, CodeBlock.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(faultCondEClass, FaultCond.class, "FaultCond", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFaultCond_Name(), ecorePackage.getEString(), "name", null, 0, 1, FaultCond.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFaultCond_Where(), this.getWhere(), null, "where", null, 0, 1, FaultCond.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFaultCond_When(), this.getWhen(), null, "when", null, 0, 1, FaultCond.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFaultCond_ExtraData(), this.getCodeBlock(), null, "extraData", null, 0, 1, FaultCond.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(whenEClass, When.class, "When", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getWhen_BetweenRounds(), this.getbetweenRounds(), null, "betweenRounds", null, 0, 1, When.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getWhen_BetweenSeconds(), this.getbetweenSeconds(), null, "betweenSeconds", null, 0, 1, When.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getWhen_Random(), this.getRandom(), null, "random", null, 0, 1, When.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getWhen_RandomBetweenRound(), this.getrandomBetweenRound(), null, "randomBetweenRound", null, 0, 1, When.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getWhen_IfCondition(), this.getCondition(), null, "ifCondition", null, 0, 1, When.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getWhen_FaultCond(), this.getFaultCond(), null, "faultCond", null, 0, 1, When.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getWhen_Syncpoint(), ecorePackage.getEString(), "syncpoint", null, 0, 1, When.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(randomEClass, Random.class, "Random", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRandom_Chance(), ecorePackage.getEInt(), "chance", null, 0, 1, Random.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(betweenSecondsEClass, betweenSeconds.class, "betweenSeconds", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getbetweenSeconds_Start(), ecorePackage.getEInt(), "start", null, 0, 1, betweenSeconds.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getbetweenSeconds_End(), ecorePackage.getEInt(), "end", null, 0, 1, betweenSeconds.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(betweenRoundsEClass, betweenRounds.class, "betweenRounds", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getbetweenRounds_Start(), ecorePackage.getEInt(), "start", null, 0, 1, betweenRounds.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getbetweenRounds_End(), ecorePackage.getEInt(), "end", null, 0, 1, betweenRounds.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getbetweenRounds_Interval(), ecorePackage.getEInt(), "interval", null, 0, 1, betweenRounds.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getbetweenRounds_Condition(), this.getCondition(), null, "condition", null, 0, 1, betweenRounds.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getbetweenRounds_Random(), this.getRandom(), null, "random", null, 0, 1, betweenRounds.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(randomBetweenRoundEClass, randomBetweenRound.class, "randomBetweenRound", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getrandomBetweenRound_Start(), ecorePackage.getEInt(), "start", null, 0, 1, randomBetweenRound.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getrandomBetweenRound_End(), ecorePackage.getEInt(), "end", null, 0, 1, randomBetweenRound.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getrandomBetweenRound_Interval(), ecorePackage.getEInt(), "interval", null, 0, 1, randomBetweenRound.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getrandomBetweenRound_Chance(), ecorePackage.getEInt(), "chance", null, 0, 1, randomBetweenRound.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(conditionEClass, Condition.class, "Condition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCondition_Name(), ecorePackage.getEString(), "name", null, 0, 1, Condition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCondition_Imports(), ecorePackage.getEString(), "imports", null, 0, 1, Condition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCondition_Code(), ecorePackage.getEString(), "code", null, 0, 1, Condition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(whereEClass, Where.class, "Where", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getWhere_JoinType(), this.getJOIN_TYPE(), "joinType", null, 0, 1, Where.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getWhere_Name(), ecorePackage.getEString(), "name", null, 0, 1, Where.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(syncpointOnFailEEnum, syncpointOnFail.class, "syncpointOnFail");
    addEEnumLiteral(syncpointOnFailEEnum, syncpointOnFail.CONTINUE);
    addEEnumLiteral(syncpointOnFailEEnum, syncpointOnFail.RETRY);

    initEEnum(syncpointTypeEEnum, syncpointType.class, "syncpointType");
    addEEnumLiteral(syncpointTypeEEnum, syncpointType.ONE_TIME);
    addEEnumLiteral(syncpointTypeEEnum, syncpointType.RECURRENT);

    initEEnum(alterPacketFaultTypeEEnum, AlterPacketFaultType.class, "AlterPacketFaultType");
    addEEnumLiteral(alterPacketFaultTypeEEnum, AlterPacketFaultType.RANDOM);
    addEEnumLiteral(alterPacketFaultTypeEEnum, AlterPacketFaultType.ZERO);

    initEEnum(joiN_TYPEEEnum, org.xtext.agen.JOIN_TYPE.class, "JOIN_TYPE");
    addEEnumLiteral(joiN_TYPEEEnum, org.xtext.agen.JOIN_TYPE.BEFORE);
    addEEnumLiteral(joiN_TYPEEEnum, org.xtext.agen.JOIN_TYPE.AFTER);

    // Create resource
    createResource(eNS_URI);
  }

} //AgenPackageImpl
