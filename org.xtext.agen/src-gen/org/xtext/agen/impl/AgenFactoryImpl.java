/**
 * generated by Xtext 2.25.0
 */
package org.xtext.agen.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.agen.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AgenFactoryImpl extends EFactoryImpl implements AgenFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static AgenFactory init()
  {
    try
    {
      AgenFactory theAgenFactory = (AgenFactory)EPackage.Registry.INSTANCE.getEFactory(AgenPackage.eNS_URI);
      if (theAgenFactory != null)
      {
        return theAgenFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new AgenFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AgenFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case AgenPackage.MODEL: return createModel();
      case AgenPackage.TYPES: return createTypes();
      case AgenPackage.RUN_CONFIGURATION: return createRunConfiguration();
      case AgenPackage.NODE: return createNode();
      case AgenPackage.LOG: return createLog();
      case AgenPackage.SYNCPOINT: return createSyncpoint();
      case AgenPackage.FAULT: return createFault();
      case AgenPackage.EXEC_PARAMS: return createExecParams();
      case AgenPackage.WHAT: return createWhat();
      case AgenPackage.REPEAT_EXECUTION: return createRepeatExecution();
      case AgenPackage.ALTER_PACKET_FAULT: return createAlterPacketFault();
      case AgenPackage.LEAK_FAULT: return createLeakFault();
      case AgenPackage.BIG_PACKET_FAULT: return createBigPacketFault();
      case AgenPackage.EXIT: return createExit();
      case AgenPackage.SLEEP: return createSleep();
      case AgenPackage.CPU_LOADER: return createCPULoader();
      case AgenPackage.CODE_BLOCK: return createCodeBlock();
      case AgenPackage.FAULT_COND: return createFaultCond();
      case AgenPackage.WHEN: return createWhen();
      case AgenPackage.RANDOM: return createRandom();
      case AgenPackage.BETWEEN_SECONDS: return createbetweenSeconds();
      case AgenPackage.BETWEEN_ROUNDS: return createbetweenRounds();
      case AgenPackage.RANDOM_BETWEEN_ROUND: return createrandomBetweenRound();
      case AgenPackage.CONDITION: return createCondition();
      case AgenPackage.WHERE: return createWhere();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case AgenPackage.SYNCPOINT_ON_FAIL:
        return createsyncpointOnFailFromString(eDataType, initialValue);
      case AgenPackage.SYNCPOINT_TYPE:
        return createsyncpointTypeFromString(eDataType, initialValue);
      case AgenPackage.ALTER_PACKET_FAULT_TYPE:
        return createAlterPacketFaultTypeFromString(eDataType, initialValue);
      case AgenPackage.JOIN_TYPE:
        return createJOIN_TYPEFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case AgenPackage.SYNCPOINT_ON_FAIL:
        return convertsyncpointOnFailToString(eDataType, instanceValue);
      case AgenPackage.SYNCPOINT_TYPE:
        return convertsyncpointTypeToString(eDataType, instanceValue);
      case AgenPackage.ALTER_PACKET_FAULT_TYPE:
        return convertAlterPacketFaultTypeToString(eDataType, instanceValue);
      case AgenPackage.JOIN_TYPE:
        return convertJOIN_TYPEToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Types createTypes()
  {
    TypesImpl types = new TypesImpl();
    return types;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RunConfiguration createRunConfiguration()
  {
    RunConfigurationImpl runConfiguration = new RunConfigurationImpl();
    return runConfiguration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Node createNode()
  {
    NodeImpl node = new NodeImpl();
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Log createLog()
  {
    LogImpl log = new LogImpl();
    return log;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Syncpoint createSyncpoint()
  {
    SyncpointImpl syncpoint = new SyncpointImpl();
    return syncpoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Fault createFault()
  {
    FaultImpl fault = new FaultImpl();
    return fault;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExecParams createExecParams()
  {
    ExecParamsImpl execParams = new ExecParamsImpl();
    return execParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public What createWhat()
  {
    WhatImpl what = new WhatImpl();
    return what;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RepeatExecution createRepeatExecution()
  {
    RepeatExecutionImpl repeatExecution = new RepeatExecutionImpl();
    return repeatExecution;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AlterPacketFault createAlterPacketFault()
  {
    AlterPacketFaultImpl alterPacketFault = new AlterPacketFaultImpl();
    return alterPacketFault;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LeakFault createLeakFault()
  {
    LeakFaultImpl leakFault = new LeakFaultImpl();
    return leakFault;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigPacketFault createBigPacketFault()
  {
    BigPacketFaultImpl bigPacketFault = new BigPacketFaultImpl();
    return bigPacketFault;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exit createExit()
  {
    ExitImpl exit = new ExitImpl();
    return exit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sleep createSleep()
  {
    SleepImpl sleep = new SleepImpl();
    return sleep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CPULoader createCPULoader()
  {
    CPULoaderImpl cpuLoader = new CPULoaderImpl();
    return cpuLoader;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CodeBlock createCodeBlock()
  {
    CodeBlockImpl codeBlock = new CodeBlockImpl();
    return codeBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FaultCond createFaultCond()
  {
    FaultCondImpl faultCond = new FaultCondImpl();
    return faultCond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public When createWhen()
  {
    WhenImpl when = new WhenImpl();
    return when;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Random createRandom()
  {
    RandomImpl random = new RandomImpl();
    return random;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public betweenSeconds createbetweenSeconds()
  {
    betweenSecondsImpl betweenSeconds = new betweenSecondsImpl();
    return betweenSeconds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public betweenRounds createbetweenRounds()
  {
    betweenRoundsImpl betweenRounds = new betweenRoundsImpl();
    return betweenRounds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public randomBetweenRound createrandomBetweenRound()
  {
    randomBetweenRoundImpl randomBetweenRound = new randomBetweenRoundImpl();
    return randomBetweenRound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Where createWhere()
  {
    WhereImpl where = new WhereImpl();
    return where;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public syncpointOnFail createsyncpointOnFailFromString(EDataType eDataType, String initialValue)
  {
    syncpointOnFail result = syncpointOnFail.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertsyncpointOnFailToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public syncpointType createsyncpointTypeFromString(EDataType eDataType, String initialValue)
  {
    syncpointType result = syncpointType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertsyncpointTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlterPacketFaultType createAlterPacketFaultTypeFromString(EDataType eDataType, String initialValue)
  {
    AlterPacketFaultType result = AlterPacketFaultType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAlterPacketFaultTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JOIN_TYPE createJOIN_TYPEFromString(EDataType eDataType, String initialValue)
  {
    JOIN_TYPE result = JOIN_TYPE.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertJOIN_TYPEToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AgenPackage getAgenPackage()
  {
    return (AgenPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static AgenPackage getPackage()
  {
    return AgenPackage.eINSTANCE;
  }

} //AgenFactoryImpl
