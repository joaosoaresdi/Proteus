/**
 * generated by Xtext 2.25.0
 */
package org.xtext.agen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.agen.AgenPackage;
import org.xtext.agen.LeakFault;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Leak Fault</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.agen.impl.LeakFaultImpl#getNrofLeaks <em>Nrof Leaks</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LeakFaultImpl extends MinimalEObjectImpl.Container implements LeakFault
{
  /**
   * The default value of the '{@link #getNrofLeaks() <em>Nrof Leaks</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNrofLeaks()
   * @generated
   * @ordered
   */
  protected static final int NROF_LEAKS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getNrofLeaks() <em>Nrof Leaks</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNrofLeaks()
   * @generated
   * @ordered
   */
  protected int nrofLeaks = NROF_LEAKS_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LeakFaultImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AgenPackage.Literals.LEAK_FAULT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getNrofLeaks()
  {
    return nrofLeaks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNrofLeaks(int newNrofLeaks)
  {
    int oldNrofLeaks = nrofLeaks;
    nrofLeaks = newNrofLeaks;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.LEAK_FAULT__NROF_LEAKS, oldNrofLeaks, nrofLeaks));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AgenPackage.LEAK_FAULT__NROF_LEAKS:
        return getNrofLeaks();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AgenPackage.LEAK_FAULT__NROF_LEAKS:
        setNrofLeaks((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AgenPackage.LEAK_FAULT__NROF_LEAKS:
        setNrofLeaks(NROF_LEAKS_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AgenPackage.LEAK_FAULT__NROF_LEAKS:
        return nrofLeaks != NROF_LEAKS_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (nrofLeaks: ");
    result.append(nrofLeaks);
    result.append(')');
    return result.toString();
  }

} //LeakFaultImpl
