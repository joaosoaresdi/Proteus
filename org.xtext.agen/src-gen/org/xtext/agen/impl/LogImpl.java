/**
 * generated by Xtext 2.25.0
 */
package org.xtext.agen.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.agen.AgenPackage;
import org.xtext.agen.CodeBlock;
import org.xtext.agen.Log;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Log</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.agen.impl.LogImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.agen.impl.LogImpl#getFaultCond <em>Fault Cond</em>}</li>
 *   <li>{@link org.xtext.agen.impl.LogImpl#getExtraData <em>Extra Data</em>}</li>
 *   <li>{@link org.xtext.agen.impl.LogImpl#getStateBased <em>State Based</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LogImpl extends TypesImpl implements Log
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getFaultCond() <em>Fault Cond</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFaultCond()
   * @generated
   * @ordered
   */
  protected static final String FAULT_COND_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFaultCond() <em>Fault Cond</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFaultCond()
   * @generated
   * @ordered
   */
  protected String faultCond = FAULT_COND_EDEFAULT;

  /**
   * The cached value of the '{@link #getExtraData() <em>Extra Data</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtraData()
   * @generated
   * @ordered
   */
  protected CodeBlock extraData;

  /**
   * The cached value of the '{@link #getStateBased() <em>State Based</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStateBased()
   * @generated
   * @ordered
   */
  protected CodeBlock stateBased;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LogImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AgenPackage.Literals.LOG;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.LOG__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFaultCond()
  {
    return faultCond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFaultCond(String newFaultCond)
  {
    String oldFaultCond = faultCond;
    faultCond = newFaultCond;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.LOG__FAULT_COND, oldFaultCond, faultCond));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CodeBlock getExtraData()
  {
    return extraData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExtraData(CodeBlock newExtraData, NotificationChain msgs)
  {
    CodeBlock oldExtraData = extraData;
    extraData = newExtraData;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AgenPackage.LOG__EXTRA_DATA, oldExtraData, newExtraData);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExtraData(CodeBlock newExtraData)
  {
    if (newExtraData != extraData)
    {
      NotificationChain msgs = null;
      if (extraData != null)
        msgs = ((InternalEObject)extraData).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AgenPackage.LOG__EXTRA_DATA, null, msgs);
      if (newExtraData != null)
        msgs = ((InternalEObject)newExtraData).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AgenPackage.LOG__EXTRA_DATA, null, msgs);
      msgs = basicSetExtraData(newExtraData, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.LOG__EXTRA_DATA, newExtraData, newExtraData));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CodeBlock getStateBased()
  {
    return stateBased;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStateBased(CodeBlock newStateBased, NotificationChain msgs)
  {
    CodeBlock oldStateBased = stateBased;
    stateBased = newStateBased;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AgenPackage.LOG__STATE_BASED, oldStateBased, newStateBased);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStateBased(CodeBlock newStateBased)
  {
    if (newStateBased != stateBased)
    {
      NotificationChain msgs = null;
      if (stateBased != null)
        msgs = ((InternalEObject)stateBased).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AgenPackage.LOG__STATE_BASED, null, msgs);
      if (newStateBased != null)
        msgs = ((InternalEObject)newStateBased).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AgenPackage.LOG__STATE_BASED, null, msgs);
      msgs = basicSetStateBased(newStateBased, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgenPackage.LOG__STATE_BASED, newStateBased, newStateBased));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AgenPackage.LOG__EXTRA_DATA:
        return basicSetExtraData(null, msgs);
      case AgenPackage.LOG__STATE_BASED:
        return basicSetStateBased(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AgenPackage.LOG__NAME:
        return getName();
      case AgenPackage.LOG__FAULT_COND:
        return getFaultCond();
      case AgenPackage.LOG__EXTRA_DATA:
        return getExtraData();
      case AgenPackage.LOG__STATE_BASED:
        return getStateBased();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AgenPackage.LOG__NAME:
        setName((String)newValue);
        return;
      case AgenPackage.LOG__FAULT_COND:
        setFaultCond((String)newValue);
        return;
      case AgenPackage.LOG__EXTRA_DATA:
        setExtraData((CodeBlock)newValue);
        return;
      case AgenPackage.LOG__STATE_BASED:
        setStateBased((CodeBlock)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AgenPackage.LOG__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AgenPackage.LOG__FAULT_COND:
        setFaultCond(FAULT_COND_EDEFAULT);
        return;
      case AgenPackage.LOG__EXTRA_DATA:
        setExtraData((CodeBlock)null);
        return;
      case AgenPackage.LOG__STATE_BASED:
        setStateBased((CodeBlock)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AgenPackage.LOG__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AgenPackage.LOG__FAULT_COND:
        return FAULT_COND_EDEFAULT == null ? faultCond != null : !FAULT_COND_EDEFAULT.equals(faultCond);
      case AgenPackage.LOG__EXTRA_DATA:
        return extraData != null;
      case AgenPackage.LOG__STATE_BASED:
        return stateBased != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", faultCond: ");
    result.append(faultCond);
    result.append(')');
    return result.toString();
  }

} //LogImpl
